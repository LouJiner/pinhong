2019-07-25 09:08:12,704 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 17640 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 09:08:12,722 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 09:08:12,723 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 09:08:16,313 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 4.656 seconds (JVM running for 8.11)
2019-07-25 09:10:20,391 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 09:10:20,391 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:10:20,401 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 09:10:20,414 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:10:20,426 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 09:10:20,425 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:10:20,426 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 09:10:20,425 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:10:20,467 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:10:20,468 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:10:20,468 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:10:20,469 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 09:10:20,507 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 09:10:23,193 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 09:10:23,194 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:10:23,206 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:10:23,207 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 09:10:23,207 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:10:23,210 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:10:23,210 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 09:10:23,211 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:10:23,212 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:10:25,997 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 09:10:25,997 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:10:26,010 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 09:10:26,012 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 09:17:34,315 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 09:17:34,315 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 09:17:34,316 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:34,316 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:34,319 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:17:34,320 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:17:34,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 09:17:34,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 09:17:34,321 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:17:34,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:17:34,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:17:34,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 09:17:34,327 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 09:17:40,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 09:17:40,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 09:17:40,235 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:40,235 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:40,239 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:17:40,240 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:17:40,241 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 09:17:40,243 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 09:17:40,241 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 09:17:40,245 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 09:17:40,246 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:17:40,246 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:17:40,247 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:17:41,546 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 09:17:41,547 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:41,553 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 09:17:41,557 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 09:17:43,058 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 09:17:43,059 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:43,061 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 09:17:43,062 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:43,063 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 09:17:43,064 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 09:17:43,064 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:17:43,064 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:17:43,065 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 09:17:43,065 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 09:17:43,066 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:17:43,069 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:17:43,069 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:17:46,556 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 09:17:46,557 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:17:46,558 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:17:46,558 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 09:17:46,559 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:17:46,560 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:17:46,561 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 09:17:46,561 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:17:46,562 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:17:49,777 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 09:17:49,778 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:49,783 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 09:17:49,785 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 09:17:55,036 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 09:17:55,036 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:55,040 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 09:17:55,041 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 09:17:57,308 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 09:17:57,308 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:17:57,316 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 09:17:57,317 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 09:18:00,938 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users 
2019-07-25 09:18:00,939 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:18:00,944 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:18:00,948 DEBUG (UsersController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 1,
    "userName" : "admin",
    "password" : "admin",
    "status" : 1
  }, {
    "userId" : 2,
    "userName" : "zzg",
    "password" : "zzg",
    "status" : 1
  }, {
    "userId" : 3,
    "userName" : "bobo",
    "password" : "bobo",
    "status" : 0
  }, {
    "userId" : 5,
    "userName" : "我",
    "password" : "1234",
    "status" : 1
  }, {
    "userId" : 7,
    "userName" : "罗军",
    "password" : "123",
    "status" : 1
  }, {
    "userId" : 8,
    "userName" : "luo",
    "password" : "123",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "luojun 2",
    "password" : "123",
    "status" : 1
  } ]
}
2019-07-25 09:18:10,674 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 09:18:10,675 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:18:10,675 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 09:18:10,676 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:18:10,677 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 09:18:10,678 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:18:10,678 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 09:18:10,678 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 09:18:10,681 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:18:10,680 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:18:10,682 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:18:10,685 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 09:18:10,689 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:18:14,304 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:18:14,305 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:18:14,308 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:18:14,309 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:18:27,100 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 09:18:27,100 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 09:18:27,101 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:18:27,102 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:18:27,104 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:18:27,104 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:18:27,105 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 09:18:27,105 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 09:18:27,107 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 09:18:27,107 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 09:18:27,107 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 09:18:27,108 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:18:27,110 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:18:28,743 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:18:28,744 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 09:18:28,752 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:18:28,754 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:08,523 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:08,524 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:08,527 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:08,528 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:09,386 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:09,386 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:09,388 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:09,389 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:10,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:10,014 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:10,018 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:10,022 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:10,602 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:10,603 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:10,605 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:10,606 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:11,638 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:11,639 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:11,641 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:11,641 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:12,337 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:12,338 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:12,340 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:12,340 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:13,216 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:13,216 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:13,218 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:13,219 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:13,795 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:13,796 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:13,811 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:13,813 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:14,659 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:14,661 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:14,664 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:14,666 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:15,424 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:15,426 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:15,429 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:15,430 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:16,460 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:16,461 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:16,463 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:16,464 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:18,036 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:18,037 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:18,042 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:18,043 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:20:19,640 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:20:19,642 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:20:19,645 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:20:19,646 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:21:57,583 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:21:57,585 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:21:57,590 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:21:57,591 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:21:58,998 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:21:58,999 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:21:59,004 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:21:59,005 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:21:59,761 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:21:59,762 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:21:59,764 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:21:59,765 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:00,356 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:00,358 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:00,360 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:00,361 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:00,726 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:00,726 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:00,728 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:00,728 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:00,995 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:00,995 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:00,998 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:01,002 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:01,319 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:01,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:01,322 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:01,323 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:01,648 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:01,650 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:01,653 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:01,653 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:01,990 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:01,991 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:01,993 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:01,994 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:02,217 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:02,218 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:02,220 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:02,221 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:02,491 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:02,491 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:02,493 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:02,493 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:02,813 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:02,814 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:02,820 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:02,821 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:03,135 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:03,136 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:03,139 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:03,139 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:22:03,445 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:22:03,446 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:22:03,453 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:22:03,454 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:28:09,420 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 09:28:09,421 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:28:09,424 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:28:09,425 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 09:28:14,034 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:28:14,035 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:28:14,036 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:28:14,036 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:08,645 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:08,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:08,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:08,651 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:09,349 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:09,350 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:09,352 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:09,353 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:09,839 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:09,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:09,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:09,847 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:10,248 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:10,249 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:10,251 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:10,252 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:10,580 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:10,581 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:10,584 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:10,585 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:11,163 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:11,164 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:11,167 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:11,168 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:11,742 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:11,744 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:11,747 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:11,747 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:12,218 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:12,219 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:12,221 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:12,223 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:12,721 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:12,721 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:12,725 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:12,726 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:13,082 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:13,082 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:13,083 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:13,084 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:13,627 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:13,627 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:13,629 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:13,629 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:14,092 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:14,093 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:14,095 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:14,096 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:14,558 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:14,558 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:14,560 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:14,561 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:15,061 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:15,061 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:15,063 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:15,063 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:15,475 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:15,476 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:15,478 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:15,479 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:33,819 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:33,820 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:33,826 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:33,827 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:34,451 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:34,452 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:34,457 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:34,458 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:34,771 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:34,773 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:34,776 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:34,778 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:29:35,091 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:29:35,092 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:29:35,094 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:29:35,095 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:30:28,752 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:30:28,752 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:30:28,755 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:30:28,756 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:30:29,434 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:30:29,435 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:30:29,438 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:30:29,440 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:30:29,920 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:30:29,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:30:29,927 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:30:29,928 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:30:30,308 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:30:30,310 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:30:30,312 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:30:30,313 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:30:30,684 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:30:30,684 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:30:30,687 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:30:30,688 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:30:30,992 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:30:30,993 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:30:30,996 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:30:30,997 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:30:31,255 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:30:31,258 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:30:31,260 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:30:31,261 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:03,733 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:03,733 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:03,735 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:03,736 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:04,384 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:04,384 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:04,386 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:04,387 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:04,833 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:04,834 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:04,835 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:04,836 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:05,163 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:05,164 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:05,167 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:05,168 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:05,485 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:05,485 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:05,487 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:05,488 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:12,461 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:12,462 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:12,464 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:12,467 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:13,096 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:13,096 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:13,097 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:13,098 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:13,988 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:13,988 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:13,990 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:13,990 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:14,644 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:14,645 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:14,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:14,647 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:15,352 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:15,353 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:15,354 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:15,355 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:15,959 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:15,960 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:15,961 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:15,962 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:16,854 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:16,855 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:16,857 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:16,857 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:52,315 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:52,316 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:52,320 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:52,321 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:52,947 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:52,948 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:52,955 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:52,956 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:53,321 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:53,322 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:53,324 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:53,325 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:53,656 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:53,657 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:53,659 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:53,660 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:53,908 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:53,908 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:53,909 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:53,910 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:54,159 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:54,159 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:54,161 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:54,162 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:54,908 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:54,908 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:54,910 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:54,911 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:31:55,457 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:31:55,458 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:31:55,459 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:31:55,460 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:02,312 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:02,313 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:02,314 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:02,315 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:02,969 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:02,970 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:02,971 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:02,972 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:09,077 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:09,078 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:09,081 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:09,082 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:09,950 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:09,952 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:09,956 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:09,958 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:10,463 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:10,464 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:10,466 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:10,466 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:10,856 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:10,856 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:10,858 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:10,858 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:11,220 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:11,221 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:11,222 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:11,223 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:11,576 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:11,576 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:11,578 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:11,578 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:11,875 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:11,876 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:11,878 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:11,879 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:12,171 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:12,172 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:12,177 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:12,178 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:12,480 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:12,481 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:12,486 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:12,487 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:12,773 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:12,774 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:12,777 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:12,778 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:32:13,073 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 09:32:13,074 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 09:32:13,076 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:32:13,077 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 09:43:49,052 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 09:43:49,052 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:43:49,053 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:43:49,054 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 09:43:49,054 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:43:49,055 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:43:49,055 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 09:43:49,056 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 09:43:49,057 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:43:51,358 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 09:43:51,359 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 09:43:51,361 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 09:43:51,361 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 09:43:52,494 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:43:52,495 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:43:52,495 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:43:52,496 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:43:52,504 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:43:52,505 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:43:52,505 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:43:52,507 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 72,
    "messageId" : 1,
    "content" : "11111111111111111",
    "writer" : "111",
    "writerDate" : 1563840000000
  } ]
}
2019-07-25 09:43:53,849 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM revert WHERE revertId = ? 
2019-07-25 09:43:53,850 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 72(Integer)
2019-07-25 09:43:53,862 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:43:53,866 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:43:53,867 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:43:53,868 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:43:53,868 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 09:43:53,868 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:43:53,869 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:43:53,870 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:43:53,871 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:02,458 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO revert VALUES(NULL,?,?,?,?) 
2019-07-25 09:44:02,470 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer), 111111111111111111(String), 11111(String), 2019-07-25 00:00:00.0(Timestamp)
2019-07-25 09:44:02,476 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:02,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:02,482 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:02,484 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:02,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:02,484 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:44:02,485 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 73,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:02,486 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:02,487 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:03,793 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO revert VALUES(NULL,?,?,?,?) 
2019-07-25 09:44:03,794 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer), 111111111111111111(String), 11111(String), 2019-07-25 00:00:00.0(Timestamp)
2019-07-25 09:44:03,797 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:03,802 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:03,803 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:03,804 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:03,805 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:03,806 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-25 09:44:03,807 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:03,807 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 73,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 74,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:03,807 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:07,969 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO revert VALUES(NULL,?,?,?,?) 
2019-07-25 09:44:07,970 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer), 111111111111111111(String), 11111(String), 2019-07-25 00:00:00.0(Timestamp)
2019-07-25 09:44:07,979 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:07,985 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:07,985 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:07,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:07,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:07,987 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:07,987 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 6
2019-07-25 09:44:07,988 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:07,988 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 73,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 74,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 75,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:08,808 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO revert VALUES(NULL,?,?,?,?) 
2019-07-25 09:44:08,809 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer), 111111111111111111(String), 11111(String), 2019-07-25 00:00:00.0(Timestamp)
2019-07-25 09:44:08,813 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:08,817 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:08,817 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:08,818 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:08,818 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:08,819 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:44:08,819 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:08,819 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:08,819 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 73,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 74,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 75,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 76,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:09,650 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO revert VALUES(NULL,?,?,?,?) 
2019-07-25 09:44:09,651 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer), 111111111111111111(String), 11111(String), 2019-07-25 00:00:00.0(Timestamp)
2019-07-25 09:44:09,660 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:09,664 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:09,664 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:09,664 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:09,665 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:09,665 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:09,665 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:09,666 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 09:44:09,667 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 73,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 74,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 75,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 76,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 77,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:10,576 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM revert WHERE revertId = ? 
2019-07-25 09:44:10,577 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 77(Integer)
2019-07-25 09:44:10,581 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:10,585 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:10,586 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:10,586 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:10,586 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:10,586 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:10,587 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:10,588 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 09:44:10,588 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 73,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 74,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 75,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 76,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:11,091 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM revert WHERE revertId = ? 
2019-07-25 09:44:11,092 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 76(Integer)
2019-07-25 09:44:11,097 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:11,102 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:11,102 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:11,102 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:11,102 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:11,104 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 6
2019-07-25 09:44:11,104 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:11,105 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:11,105 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 73,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 74,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 75,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:11,534 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM revert WHERE revertId = ? 
2019-07-25 09:44:11,534 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 74(Integer)
2019-07-25 09:44:11,540 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:11,544 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:11,544 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:11,545 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:11,545 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:11,547 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:11,547 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 5
2019-07-25 09:44:11,548 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:11,548 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 73,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 75,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:12,273 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM revert WHERE revertId = ? 
2019-07-25 09:44:12,274 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 73(Integer)
2019-07-25 09:44:12,283 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:12,287 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:12,288 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:12,288 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:12,288 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:12,288 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:12,289 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:12,289 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 09:44:12,290 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  }, {
    "revertId" : 75,
    "messageId" : 1,
    "content" : "111111111111111111",
    "writer" : "11111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 09:44:12,903 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM revert WHERE revertId = ? 
2019-07-25 09:44:12,904 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 75(Integer)
2019-07-25 09:44:12,912 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 09:44:12,916 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 09:44:12,917 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:12,917 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 09:44:12,917 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 09:44:12,917 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 09:44:12,918 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 09:44:12,919 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 09:44:12,920 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 10:04:11,068 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:11,069 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:11,073 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:11,074 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:12,106 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:12,106 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:12,107 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:12,108 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:12,471 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:12,472 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:12,473 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:12,473 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:12,783 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:12,784 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:12,786 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:12,787 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:13,028 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:13,030 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:13,033 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:13,034 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:14,146 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:14,146 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:14,148 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:14,149 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:14,378 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:14,379 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:14,381 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:14,381 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:14,662 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:14,663 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:14,664 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:14,665 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:15,309 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:15,310 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:15,312 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:15,313 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:15,568 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:15,569 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:15,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:15,571 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:15,845 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:15,846 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:15,847 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:15,847 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:16,599 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:16,600 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:16,601 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:16,602 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:16,836 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:16,837 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:16,838 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:16,838 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:35,949 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:35,949 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:35,950 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:35,951 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:36,261 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:36,262 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:36,263 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:36,263 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:04:58,764 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:04:58,765 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:04:58,766 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:04:58,766 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:05:50,403 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:05:50,404 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:05:50,405 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:05:50,406 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:05:51,918 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:05:51,919 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:05:51,920 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:05:51,921 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:05:52,302 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:05:52,302 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:05:52,304 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:05:52,305 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:05:52,619 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:05:52,620 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:05:52,621 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:05:52,622 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:05:52,936 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:05:52,936 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:05:52,938 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:05:52,939 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:06:44,112 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:06:44,114 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:06:44,116 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:06:44,117 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:06:45,591 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:06:45,591 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:06:45,594 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:06:45,597 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:06:46,477 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:06:46,479 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:06:46,482 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:06:46,482 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:06:46,763 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:06:46,764 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:06:46,766 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:06:46,767 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:06:47,075 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:06:47,076 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:06:47,078 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:06:47,080 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:06:47,313 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:06:47,314 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:06:47,315 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:06:47,315 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:06:47,572 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:06:47,572 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:06:47,574 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:06:47,576 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:06:47,811 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:06:47,812 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:06:47,813 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:06:47,814 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:07:33,042 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:07:33,043 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:07:33,044 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:07:33,044 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:07:35,292 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:07:35,294 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:07:35,296 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:07:35,297 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:07:52,317 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:07:52,318 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:07:52,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:07:52,326 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:02,749 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:08:02,749 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:08:02,750 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:02,750 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:02,753 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:02,756 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:08:02,756 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:02,757 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:08:02,757 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:02,759 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:02,760 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:08:02,760 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:02,762 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:04,223 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:08:04,224 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:04,229 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:08:04,230 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:04,850 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:08:04,851 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:04,854 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:04,855 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:08:06,692 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:08:06,693 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:06,695 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:08:06,696 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:08:06,696 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:06,696 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:06,697 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:06,697 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:08:06,699 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:06,700 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:06,700 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:06,700 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:08:06,703 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:07,701 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:08:07,702 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:07,704 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:07,705 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:08:09,366 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:08:09,368 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:09,370 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:08:09,371 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:09,372 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:08:09,373 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:09,374 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:09,375 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:08:09,375 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:09,376 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:09,376 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:08:09,378 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:09,378 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:10,181 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 10:08:10,182 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:10,186 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 10:08:10,187 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 10:08:11,865 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:08:11,866 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:11,870 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:08:11,870 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:11,870 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:08:11,871 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:11,874 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:11,874 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:11,875 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:11,875 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:08:11,875 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:08:11,878 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:11,878 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:12,826 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:08:12,827 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:12,834 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:12,835 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:08:14,244 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:08:14,245 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:14,246 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:08:14,247 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:15,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:08:15,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:15,329 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:15,329 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:08:15,330 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:08:15,330 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:15,330 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:08:15,331 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:15,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:08:15,332 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:15,333 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:15,333 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:15,333 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:15,760 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:08:15,760 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:15,761 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:15,762 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:08:17,097 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:17,098 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 67(Integer)
2019-07-25 10:08:17,101 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:17,102 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:19,561 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:08:19,563 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:19,564 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:08:19,565 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:08:19,565 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:08:19,566 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:08:19,566 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:19,566 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:08:19,567 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:08:19,567 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:08:19,567 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:08:19,567 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:19,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:08:20,916 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:20,917 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:20,918 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:20,919 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:42,117 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:42,118 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:42,120 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:42,120 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:42,754 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:42,754 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:42,756 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:42,756 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:43,000 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:43,000 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:43,001 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:43,002 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:43,286 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:43,287 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:43,290 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:43,293 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:43,525 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:43,525 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:43,526 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:43,527 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:43,822 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:43,823 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:43,827 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:43,828 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:44,079 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:44,079 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:44,081 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:44,082 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:44,344 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:44,344 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:44,346 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:44,347 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:44,569 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:44,570 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:44,574 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:44,576 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:44,859 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:44,860 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:44,862 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:44,863 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:45,108 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:45,108 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:45,110 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:45,110 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:45,361 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:45,361 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:45,362 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:45,363 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:45,601 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:45,601 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:45,603 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:45,604 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:45,858 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:45,859 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:45,861 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:45,861 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:46,115 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:46,116 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:46,117 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:46,118 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:46,426 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:46,427 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:46,429 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:46,430 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:08:46,717 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:08:46,718 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:08:46,722 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:08:46,723 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:09:36,707 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:09:36,707 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:09:36,708 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:09:36,709 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:09:37,432 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:09:37,432 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:09:37,435 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:09:37,436 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:09:37,675 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:09:37,677 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:09:37,680 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:09:37,681 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:09:37,879 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:09:37,880 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:09:37,883 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:09:37,883 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:00,396 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:00,397 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:00,398 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:00,399 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:01,198 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:01,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:01,200 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:01,200 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:01,566 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:01,567 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:01,569 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:01,569 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:01,857 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:01,860 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:01,862 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:01,863 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:02,130 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:02,131 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:02,133 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:02,134 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:28,178 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:28,179 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:28,181 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:28,183 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:29,148 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:29,150 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:29,153 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:29,154 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:29,767 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:29,768 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:29,770 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:29,770 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:30,160 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:30,160 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:30,162 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:30,163 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:30,474 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:30,475 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:30,477 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:30,477 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:44,583 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:10:44,584 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:10:44,589 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:10:44,590 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:10:45,301 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:10:45,303 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:10:45,304 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:10:45,304 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:10:45,305 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:10:45,305 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:10:45,307 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:10:45,308 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:10:45,308 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:10:45,308 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:10:45,308 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:10:45,309 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:10:45,310 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:10:46,796 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:46,797 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 70(Integer)
2019-07-25 10:10:46,801 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:46,802 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:10:50,259 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:10:50,259 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:10:50,262 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:10:50,263 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:10:51,370 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:10:51,371 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:10:51,374 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:10:51,375 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:10:51,375 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:10:51,376 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:10:51,376 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:10:51,377 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:10:51,378 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:10:51,381 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:10:51,382 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:10:51,384 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:10:51,389 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:10:52,397 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:10:52,398 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:10:52,400 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:10:52,401 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:13:46,841 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:13:46,842 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:13:46,846 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:13:46,846 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:13:47,481 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:13:47,481 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:13:47,483 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:13:47,484 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:13:48,048 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:13:48,049 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:13:48,051 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:13:48,051 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:13:48,333 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:13:48,334 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:13:48,335 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:13:48,336 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:13:48,717 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:13:48,717 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:13:48,719 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:13:48,720 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:14:07,118 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:07,118 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:07,119 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:07,119 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:07,124 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:07,124 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:07,124 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:07,124 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:07,124 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:07,124 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:07,125 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:07,126 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:07,126 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:08,722 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:14:08,723 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 10:14:08,726 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:14:08,727 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  }
}
2019-07-25 10:14:10,713 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:10,713 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:10,714 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:10,714 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:10,714 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:10,714 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:10,721 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:10,721 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:10,721 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:10,721 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:10,722 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:10,722 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:10,726 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:14,403 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:14,404 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:14,406 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:14,407 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:15,826 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:14:15,827 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:15,829 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:15,830 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:14:22,844 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:22,845 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:22,847 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:22,848 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:22,851 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:22,851 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:22,852 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:22,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:22,853 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:22,853 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:22,854 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:22,855 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:22,856 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:24,373 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:24,374 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:24,376 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:24,376 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:25,455 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:14:25,456 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:25,459 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:25,461 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:14:28,464 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:28,464 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:28,464 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:28,464 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:28,468 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:28,468 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:28,468 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:28,468 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:28,468 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:28,468 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:28,469 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:28,472 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:28,472 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:29,841 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:29,842 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:29,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:29,846 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:30,851 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:30,851 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:30,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:30,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:30,853 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:30,854 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:30,854 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:30,855 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:30,857 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:30,857 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:30,858 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:30,858 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:30,858 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:31,644 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:14:31,645 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 67(Integer)
2019-07-25 10:14:31,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:14:31,647 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:14:33,710 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:33,711 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:33,712 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:33,713 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:33,712 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:33,714 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:33,714 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:33,714 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:33,716 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:33,717 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:33,717 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:33,717 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:33,719 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:35,612 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:14:35,612 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 66(Integer)
2019-07-25 10:14:35,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:14:35,615 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }
}
2019-07-25 10:14:36,917 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:36,918 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:36,921 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:36,921 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:36,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:36,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:36,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:36,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:36,922 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:36,923 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:36,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:36,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:36,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:37,788 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:14:37,788 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:14:37,790 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:14:37,791 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:14:42,508 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:42,508 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:42,512 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:42,513 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:42,513 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:42,513 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:42,513 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:42,513 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:42,514 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:42,514 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:42,518 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:42,518 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:42,518 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:52,252 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:52,253 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:52,255 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:52,256 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:53,197 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:53,198 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:53,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:53,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:53,201 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:53,201 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:53,201 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:53,201 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:53,202 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:53,202 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:53,202 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:53,204 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:53,204 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:54,162 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:14:54,162 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:54,165 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:54,166 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:14:55,116 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:55,116 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:55,117 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:55,117 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:55,121 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:55,121 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:55,121 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:55,121 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:55,122 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:55,122 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:55,123 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:55,124 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:55,124 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:55,823 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:14:55,824 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:55,827 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:55,827 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:14:56,756 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:14:56,757 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:14:56,759 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:14:56,760 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:14:59,082 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:14:59,082 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:14:59,083 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:59,083 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:59,085 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:59,086 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:14:59,086 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:14:59,087 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:14:59,086 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:14:59,087 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:14:59,087 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:14:59,090 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:59,090 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:14:59,980 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 10:14:59,981 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:14:59,983 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 10:14:59,984 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 10:15:06,158 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 10:15:06,158 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:15:06,161 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 10:15:06,162 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 10:15:08,056 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:15:08,056 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:15:08,056 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:15:08,056 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:15:08,058 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:15:08,058 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:15:08,058 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:15:08,058 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:15:08,063 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:15:08,063 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:15:08,063 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:15:08,063 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:15:08,064 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:15:46,994 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:15:46,994 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:15:46,995 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:15:46,995 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:15:46,998 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:15:46,998 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:15:46,999 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:15:46,999 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:15:46,998 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:15:46,999 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:15:46,999 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:15:47,001 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:15:47,001 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:17:27,309 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:17:27,311 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:17:27,310 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:17:27,311 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:17:27,318 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:17:27,319 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:17:27,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:17:27,320 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:17:27,320 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:17:27,323 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:17:27,323 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:17:27,324 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:17:27,327 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:17:28,588 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:17:28,588 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:17:28,589 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:17:28,589 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:17:28,592 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:17:28,592 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:17:28,592 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:17:28,593 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:17:28,593 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:17:28,594 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:17:28,595 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:17:28,595 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:17:28,597 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:18:10,435 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:18:10,436 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:18:10,437 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:18:10,437 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:18:10,441 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:18:10,441 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:18:10,442 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:18:10,442 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:18:10,442 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:18:10,445 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:18:10,444 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:18:10,445 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:18:10,447 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:18:57,646 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:18:57,646 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:18:57,648 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:18:57,649 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:18:57,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:18:57,650 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:18:57,653 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:18:57,653 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:18:57,653 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:18:57,653 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:18:57,653 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:18:57,658 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:18:57,658 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:18:58,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:18:58,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:18:58,235 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:18:58,235 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:18:58,238 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:18:58,239 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:18:58,240 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:18:58,241 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:18:58,239 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:18:58,241 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:18:58,246 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:18:58,248 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:18:58,248 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:14,225 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:14,225 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:14,227 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:14,227 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:14,231 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:14,230 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:14,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:14,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:14,231 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:14,231 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:14,231 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:14,234 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:14,234 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:14,888 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:14,888 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:14,889 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:14,889 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:14,893 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:14,892 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:14,893 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:14,895 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:14,895 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:14,896 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:14,897 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:14,898 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:14,898 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:15,553 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:15,553 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:15,553 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:15,553 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:15,554 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:15,554 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:15,559 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:15,559 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:15,558 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:15,559 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:15,564 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:15,564 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:15,569 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:16,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:16,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:16,187 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:16,188 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:16,190 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:16,189 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:16,194 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:16,196 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:16,197 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:16,199 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:16,200 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:16,200 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:16,202 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:45,056 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:45,056 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:45,057 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:45,057 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:45,059 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:45,059 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:45,060 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:45,060 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:45,060 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:45,060 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:45,060 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:45,063 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:45,062 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:45,839 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:45,840 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:45,840 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:45,840 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:45,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:45,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:45,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:45,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:45,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:45,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:45,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:45,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:45,844 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:46,209 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:46,209 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:46,209 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:46,209 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:46,210 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:46,211 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:46,211 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:46,212 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:46,213 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:46,216 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:46,215 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:46,217 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:46,217 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:46,544 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:46,545 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:46,545 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:46,545 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:46,547 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:46,546 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:46,547 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:46,547 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:46,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:46,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:46,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:46,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:46,551 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:46,880 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:46,881 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:46,882 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:46,883 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:46,884 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:46,883 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:46,884 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:46,885 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:46,886 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:46,887 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:46,887 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:46,887 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:46,889 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:47,237 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:47,237 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:47,237 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:47,238 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:47,239 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:47,239 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:47,241 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:47,241 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:47,241 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:47,242 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:47,242 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:47,242 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:47,244 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:59,356 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:19:59,356 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:59,359 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:19:59,359 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:19:59,359 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:19:59,360 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:19:59,360 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:59,360 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:19:59,360 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:19:59,360 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:19:59,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:19:59,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:19:59,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:01,039 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:01,039 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:01,039 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:01,039 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:01,040 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:01,040 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:01,043 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:01,043 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:01,043 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:01,043 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:01,043 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:01,043 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:01,046 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:01,788 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:01,788 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:01,791 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:01,791 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:01,793 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:01,794 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:01,794 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:01,794 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:01,797 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:01,798 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:01,800 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:01,800 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:01,803 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:02,561 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:02,561 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:02,561 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:02,561 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:02,565 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:02,565 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:02,565 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:02,565 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:02,565 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:02,564 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:02,567 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:02,569 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:02,573 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:03,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:03,213 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:03,214 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:03,215 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:03,216 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:03,217 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:03,218 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:03,220 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:03,221 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:03,222 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:03,222 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:03,223 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:03,224 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:03,790 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:03,790 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:03,790 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:03,790 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:03,792 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:03,792 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:03,793 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:03,793 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:03,793 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:03,793 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:03,793 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:03,795 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:03,795 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:11,695 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:11,696 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:11,698 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:11,699 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:11,699 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:11,699 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:11,700 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:11,700 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:11,701 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:11,701 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:11,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:11,703 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:11,703 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:12,611 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:12,612 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:12,614 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:12,614 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:12,614 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:12,615 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:12,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:12,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:12,617 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:12,617 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:12,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:12,620 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:12,620 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:13,270 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:13,271 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:13,273 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:13,273 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:13,276 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:13,278 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:13,280 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:13,280 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:13,280 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:13,280 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:13,280 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:13,281 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:13,282 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:14,022 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:14,022 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:14,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:14,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:14,030 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:14,030 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:14,030 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:14,030 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:14,030 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:14,030 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:14,031 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:14,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:14,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:19,895 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:19,896 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:19,896 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:19,897 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:19,898 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:19,899 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:19,900 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:19,901 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:19,902 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:19,904 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:19,911 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:19,912 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:19,916 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:20,645 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:20,646 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:20,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:20,650 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:20,650 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:20,650 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:20,651 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:20,651 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:20,651 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:20,651 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:20,657 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:20,657 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:20,657 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:21,210 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:20:21,211 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:21,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:20:21,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:20:21,215 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:21,216 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:20:21,217 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:20:21,219 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:20:21,217 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:20:21,219 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:20:21,220 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:20:21,220 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:20:21,222 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:30,177 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:21:30,177 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:30,178 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:30,179 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:30,179 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:30,179 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:21:30,181 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:30,181 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:21:30,181 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:30,182 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:30,182 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:21:30,182 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:30,184 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:30,553 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:30,554 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:21:30,554 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:30,555 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:30,558 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:30,558 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:21:30,559 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:30,566 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:30,567 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:21:30,568 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:30,568 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:21:30,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:30,574 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:32,385 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:21:32,385 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:32,385 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:32,385 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:32,391 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:21:32,391 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:32,391 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:32,391 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:32,392 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:21:32,392 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:21:32,392 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:32,395 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:32,395 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:33,711 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:21:33,712 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:33,714 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:21:33,715 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:21:36,598 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:21:36,598 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 70(Integer)
2019-07-25 10:21:36,600 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:21:36,602 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:21:38,488 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:38,489 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:38,491 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:38,492 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:40,054 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:40,055 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:40,057 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:21:40,057 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:40,057 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:40,058 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:21:40,060 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:21:40,060 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:40,060 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:40,060 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:40,061 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:40,061 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:21:40,063 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:45,355 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:45,355 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:45,358 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:45,358 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:46,910 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:46,910 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:21:46,911 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:46,911 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:46,917 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:46,918 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:21:46,917 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:46,918 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:46,918 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:21:46,918 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:21:46,918 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:46,921 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:46,921 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:48,348 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 10:21:48,349 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:48,351 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 10:21:48,351 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 10:21:50,479 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 10:21:50,480 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 10:21:50,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 10:21:50,482 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:21:50,482 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 10:21:50,483 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 10:21:50,485 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 10:21:50,486 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 10:21:55,546 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:55,546 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:21:55,546 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:55,546 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:55,549 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:55,549 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:21:55,549 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:21:55,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:55,550 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:21:55,550 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:21:55,550 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:55,554 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:55,554 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:21:56,650 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:21:56,652 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:56,657 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:21:56,658 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:21:58,096 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 10:21:58,096 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 10:21:58,101 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:21:58,102 DEBUG (ProductController.java:55)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 10:21:59,848 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 10:21:59,849 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:21:59,852 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:21:59,853 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 10:22:01,360 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:22:01,362 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 67(Integer)
2019-07-25 10:22:01,364 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:22:01,364 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:22:02,520 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:22:02,520 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:02,521 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:22:02,522 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:22:05,229 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 10:22:05,229 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 10:22:05,232 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:22:05,233 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 10:22:05,233 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 10:22:05,235 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:22:05,235 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 10:22:05,235 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 10:22:05,236 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:22:10,978 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:22:10,978 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:22:10,978 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:10,978 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:10,981 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:10,981 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:10,981 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:22:10,981 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:22:10,982 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:22:10,982 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:22:10,982 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:22:10,984 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:10,984 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:12,510 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:22:12,510 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:12,511 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:22:12,512 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:22:13,671 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:22:13,672 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:13,672 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:22:13,672 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:13,674 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:13,674 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:22:13,675 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:22:13,675 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:22:13,675 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:22:13,680 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:13,680 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:13,681 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:22:13,684 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:16,546 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:22:16,547 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 10:22:16,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:22:16,551 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  }
}
2019-07-25 10:22:23,021 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:22:23,021 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:22:23,021 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:23,021 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:23,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:23,024 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:22:23,024 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:22:23,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:23,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:22:23,025 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:22:23,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:22:23,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:23,028 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:25,449 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:22:25,449 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 10:22:25,451 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:22:25,452 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  }
}
2019-07-25 10:22:30,096 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:22:30,097 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:30,099 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:22:30,100 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:22:30,100 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:30,100 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:22:30,102 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:30,103 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:22:30,103 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:22:30,103 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:30,103 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:22:30,108 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:30,107 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:31,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:22:31,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 66(Integer)
2019-07-25 10:22:31,215 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:22:31,216 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }
}
2019-07-25 10:22:32,931 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:22:32,932 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:22:32,932 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:32,933 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:32,935 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:32,936 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:22:32,938 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:32,937 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:22:32,937 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:22:32,939 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:22:32,939 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:22:32,942 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:32,942 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:33,667 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 10:22:33,668 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 10:22:33,673 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:22:33,674 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 10:22:36,608 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:22:36,608 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:22:36,609 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:36,609 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:22:36,609 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:36,609 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:22:36,609 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:22:36,609 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:22:36,616 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:22:36,616 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:22:36,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:36,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:22:36,619 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:23:02,548 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:23:02,549 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:23:02,552 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:23:02,553 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:23:04,632 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 10:23:04,633 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 2(Integer)
2019-07-25 10:23:04,635 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:23:04,636 DEBUG (ProductController.java:55)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 10:23:11,912 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 10:23:11,913 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:23:11,913 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:23:11,913 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 10:23:11,913 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:23:11,913 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 10:23:11,916 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 10:23:11,916 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:23:11,916 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 10:23:11,916 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 10:23:11,916 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:23:11,917 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 10:23:11,920 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 10:23:23,614 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 10:23:23,614 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 10:23:23,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:23:23,615 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 10:23:23,615 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 10:23:23,616 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:23:23,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 10:23:23,617 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 10:23:23,619 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 10:23:30,864 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 10:23:30,864 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:23:30,867 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 10:23:30,868 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  }, {
    "messageId" : 22,
    "title" : "11111111111",
    "content" : "111111111111111",
    "writer" : "1111",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 10:23:33,078 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM message WHERE messageId = ? 
2019-07-25 10:23:33,079 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 22(Integer)
2019-07-25 10:23:33,089 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 10:23:33,094 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 10:23:33,095 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 10:23:33,096 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 10:23:33,096 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 11:12:25,569 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 11:12:25,570 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 70(Integer)
2019-07-25 11:12:25,576 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:12:25,577 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 11:12:27,439 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 11:12:27,439 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 11:12:27,439 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:12:27,440 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:12:27,440 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:12:27,440 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 11:12:27,442 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:12:27,442 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 11:12:27,442 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 11:12:27,446 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 11:12:27,446 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:12:27,446 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 11:12:27,446 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:12:28,328 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 11:12:28,329 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 67(Integer)
2019-07-25 11:12:28,330 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:12:28,331 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }
}
2019-07-25 11:12:29,419 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 11:12:29,420 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 11:12:29,421 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:12:29,420 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:12:29,423 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 11:12:29,423 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 11:12:29,423 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 11:12:29,427 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:12:29,427 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:12:29,427 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 11:12:29,427 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 11:12:29,430 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:12:29,430 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:12:30,577 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 11:12:30,578 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:12:30,580 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 11:12:30,581 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 11:12:32,063 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 11:12:32,063 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 67(Integer)
2019-07-25 11:12:32,065 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:12:32,065 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }
}
2019-07-25 11:12:33,205 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 11:12:33,213 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:12:33,216 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 11:12:33,216 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 11:12:35,281 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 11:12:35,281 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:12:35,282 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 11:12:35,282 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:12:35,283 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:12:35,284 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 11:12:35,284 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 11:12:35,284 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 11:12:35,284 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 11:12:35,288 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:12:35,289 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:12:35,289 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 11:12:35,292 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:12:40,471 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 11:12:40,471 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:12:40,475 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:12:40,475 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 11:12:40,476 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:12:40,477 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:12:40,478 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 11:12:40,478 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:12:40,481 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:28:01,887 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 11:28:01,887 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 11:28:01,888 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:28:01,888 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:28:01,892 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:28:01,892 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:28:01,893 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 11:28:01,893 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 11:28:01,893 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 11:28:01,893 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 11:28:01,895 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 11:28:01,896 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:28:01,896 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:28:06,511 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 11:28:06,512 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:28:06,515 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:28:06,515 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 11:28:06,516 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:28:06,517 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:28:06,517 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 11:28:06,517 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:28:06,518 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:40:04,299 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 11:40:04,298 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 11:40:04,300 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:40:04,300 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:40:04,303 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 11:40:04,303 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 11:40:04,304 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 11:40:04,305 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:40:04,306 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 11:40:04,307 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:40:04,308 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:40:04,309 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 11:40:04,318 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:40:20,042 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 11:40:20,043 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:40:20,045 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:40:20,045 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 11:40:20,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:40:20,047 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:40:20,048 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 11:40:20,048 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:40:20,049 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:40:28,945 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 11:40:28,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:40:28,947 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:40:28,947 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 11:40:28,948 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:40:28,949 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:40:28,949 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 11:40:28,950 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:40:28,951 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 11:54:10,524 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users 
2019-07-25 11:54:10,525 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:54:10,530 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 11:54:10,530 DEBUG (UsersController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 1,
    "userName" : "admin",
    "password" : "admin",
    "status" : 1
  }, {
    "userId" : 2,
    "userName" : "zzg",
    "password" : "zzg",
    "status" : 1
  }, {
    "userId" : 3,
    "userName" : "bobo",
    "password" : "bobo",
    "status" : 0
  }, {
    "userId" : 5,
    "userName" : "我",
    "password" : "1234",
    "status" : 1
  }, {
    "userId" : 7,
    "userName" : "罗军",
    "password" : "123",
    "status" : 1
  }, {
    "userId" : 8,
    "userName" : "luo",
    "password" : "123",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "luojun 2",
    "password" : "123",
    "status" : 1
  } ]
}
2019-07-25 11:54:18,733 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 11:54:18,734 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:54:18,739 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 11:54:18,741 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 11:54:18,741 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 11:54:18,741 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 11:54:18,742 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:54:18,742 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 11:54:18,743 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 11:54:18,744 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 11:54:18,744 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:54:18,746 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 11:54:18,746 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 11:54:27,690 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 11:54:27,691 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 用户名(String)
2019-07-25 11:54:27,692 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 11:54:34,378 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 11:54:34,379 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 11:54:34,381 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 12:00:51,913 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 17640 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 12:00:51,913 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 12:00:51,913 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 12:00:54,353 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 2.501 seconds (JVM running for 10366.15)
2019-07-25 14:22:31,486 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 15408 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 14:22:31,505 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 14:22:31,507 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 14:22:34,947 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 4.245 seconds (JVM running for 7.487)
2019-07-25 14:24:21,454 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:21,455 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:21,468 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:21,476 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:21,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:21,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:21,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:21,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:21,516 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:21,516 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:21,516 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:21,519 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:21,557 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:26,528 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:26,528 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:26,530 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:26,530 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:26,534 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:26,536 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:26,536 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:26,537 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:26,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:26,538 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:26,540 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:26,542 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:26,543 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:28,223 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 14:24:28,224 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:28,233 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:28,235 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 14:24:30,120 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:30,121 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:30,122 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:30,122 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:30,127 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:30,128 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:30,129 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:30,129 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:30,130 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:30,130 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:30,130 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:30,133 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:30,133 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:31,276 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 14:24:31,277 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:31,281 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:31,283 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 14:24:34,317 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:34,318 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:34,318 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:34,319 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:34,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:34,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:34,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:34,326 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:34,326 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:34,326 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:34,328 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:34,329 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:34,329 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:36,822 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 14:24:36,823 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:36,826 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:36,827 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 14:24:38,594 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 14:24:38,595 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 66(Integer)
2019-07-25 14:24:38,600 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:24:38,602 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }
}
2019-07-25 14:24:40,562 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:40,563 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:40,568 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:40,569 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:40,569 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:40,569 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:40,570 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:40,570 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:40,570 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:40,571 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:40,573 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:40,573 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:40,573 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:41,630 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 14:24:41,632 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 69(Integer)
2019-07-25 14:24:41,635 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:24:41,637 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 14:24:42,769 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:42,770 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:42,769 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:42,771 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:42,772 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:42,773 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:42,773 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:42,774 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:42,774 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:42,775 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:42,776 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:42,776 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:42,777 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:43,764 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 14:24:43,765 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 14:24:43,771 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:24:43,772 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 14:24:45,166 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:45,166 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:45,167 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:45,167 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:45,170 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:45,170 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:45,170 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:45,171 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:45,171 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:45,171 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:45,172 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:45,173 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:45,173 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:46,633 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:46,635 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:46,640 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:46,641 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:50,780 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:50,780 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:50,781 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:50,781 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:50,785 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:50,785 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:50,785 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:50,785 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:50,785 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:50,785 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:50,786 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:50,788 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:50,788 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:52,675 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 14:24:52,676 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:52,678 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:52,680 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 14:24:54,028 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:24:54,029 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:54,029 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:24:54,030 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:24:54,033 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:24:54,036 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:24:54,036 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:24:54,039 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:54,039 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:24:54,040 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:24:54,040 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:24:54,045 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:24:54,046 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:03,610 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:25:03,610 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 14:25:03,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:25:09,778 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:25:09,778 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: (String)
2019-07-25 14:25:09,780 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 14:25:09,788 ERROR (BaseController.java:295)- 系统异常:null
java.lang.NullPointerException: null
	at com.zryx.company.controller.ChatController.exit(ChatController.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 14:25:35,935 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:25:35,936 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:35,938 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:25:35,939 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:35,940 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:35,940 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:25:35,941 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:25:35,942 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:25:35,942 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:25:35,944 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:35,945 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:35,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:25:35,949 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:43,457 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:25:43,458 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:43,460 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:25:43,461 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:43,461 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:25:43,462 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:25:43,464 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:25:43,465 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:43,465 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:25:43,466 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:43,467 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:25:43,467 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:43,470 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:43,736 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:25:43,736 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:25:43,736 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:43,737 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:43,739 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:43,740 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:25:43,740 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:25:43,740 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:25:43,740 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:43,740 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:25:43,742 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:25:43,743 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:43,746 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:43,977 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:25:43,977 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:25:43,978 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:43,978 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:43,981 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:25:43,981 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:25:43,982 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:25:43,985 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:43,985 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:43,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:25:43,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:25:43,989 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:43,989 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:44,881 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:25:44,882 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:44,884 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:25:44,885 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:25:44,885 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:25:44,886 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:25:44,886 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:44,887 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:25:44,888 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:25:44,890 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:25:44,889 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:25:44,891 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:25:44,894 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:26:13,242 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:26:13,243 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:26:13,243 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:26:13,244 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:26:13,246 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:26:13,246 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:26:13,247 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:26:13,247 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:26:13,247 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:26:13,248 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:26:13,248 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:26:13,250 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:26:13,250 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:26:28,446 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 9964 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 14:26:28,453 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 14:26:28,454 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 14:26:32,419 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 4.632 seconds (JVM running for 6.834)
2019-07-25 14:26:40,448 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:26:40,452 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:26:40,464 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:26:40,475 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:26:40,486 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:26:40,486 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:26:40,486 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:26:40,486 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:26:40,519 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:26:40,519 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:26:40,520 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:26:40,524 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:26:40,571 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:26:43,604 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:26:43,605 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 14:26:43,606 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:26:45,232 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:26:45,233 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: (String)
2019-07-25 14:26:45,235 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 14:26:45,240 ERROR (BaseController.java:295)- 系统异常:null
java.lang.NullPointerException: null
	at com.zryx.company.controller.ChatController.exit(ChatController.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 14:26:52,176 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:26:52,176 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 14:26:52,178 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:27:17,900 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 14:27:17,901 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:27:17,901 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 14:27:17,903 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:27:17,907 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:27:17,908 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:27:17,908 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 14:27:17,911 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:27:17,912 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 14:27:17,914 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 14:27:17,952 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 14:27:17,957 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 14:27:17,963 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 14:27:29,691 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:27:29,691 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: admin(String)
2019-07-25 14:27:29,693 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:28:26,054 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:28:26,055 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: (String)
2019-07-25 14:28:26,057 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 14:28:26,058 ERROR (BaseController.java:295)- 系统异常:null
java.lang.NullPointerException: null
	at com.zryx.company.controller.ChatController.exit(ChatController.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 14:29:03,203 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 9964 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 14:29:03,204 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 14:29:03,204 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 14:29:04,124 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 0.964 seconds (JVM running for 158.539)
2019-07-25 14:29:09,006 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:29:09,008 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 14:29:09,010 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:35:59,571 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 14:35:59,571 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 14:35:59,576 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 14:53:07,672 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 14:53:07,674 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 14:53:07,683 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 14:53:07,686 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 15:00:37,189 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:00:37,191 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:00:37,192 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:00:37,195 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:00:37,196 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:00:37,196 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:00:37,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:00:37,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:00:37,201 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:00:37,204 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:00:37,206 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:00:37,206 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:00:37,210 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:00:48,841 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 15:00:48,842 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:00:48,846 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:00:48,847 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 15:00:50,283 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 15:00:50,284 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:00:50,290 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:00:50,292 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 15:01:01,378 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:01:01,379 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:01:01,382 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:01:04,000 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:01:04,001 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 用户名(String)
2019-07-25 15:01:04,002 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:01:08,007 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:01:08,008 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:01:08,010 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:01:18,499 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:01:18,500 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 用户名(String)
2019-07-25 15:01:18,501 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:01:21,071 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:01:21,072 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:01:21,074 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:02:21,683 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 9964 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 15:02:21,683 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 15:02:21,683 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 15:02:22,447 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 0.813 seconds (JVM running for 2156.862)
2019-07-25 15:02:22,629 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:02:22,630 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:02:22,634 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:02:24,330 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:02:24,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:02:24,333 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:02:27,242 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:02:27,243 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:02:27,244 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:02:59,890 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:02:59,891 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:02:59,896 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:02:59,897 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:02:59,899 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:02:59,899 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:02:59,898 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:02:59,898 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:02:59,900 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:02:59,901 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:02:59,902 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:02:59,906 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:02:59,908 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:03:01,535 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 15:03:01,536 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:03:01,538 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:03:01,540 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 15:03:03,431 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:03:03,432 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:03:03,433 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:03:03,434 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:03:03,435 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:03:03,435 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:03:03,436 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:03:03,436 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:03:03,437 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:03:03,437 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:03:03,437 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:03:03,440 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:03:03,440 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:03:22,752 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:03:22,753 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:03:22,755 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:03:29,797 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:03:29,798 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:03:29,800 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:03:39,519 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:03:39,519 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:03:39,521 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:03:41,863 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:03:41,865 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:03:41,868 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:03:41,869 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:03:41,860 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:03:41,870 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:03:41,871 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:03:41,871 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:03:41,879 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:03:41,881 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:03:41,880 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:03:41,887 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:03:41,890 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:03:53,779 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:03:53,780 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 15:03:53,786 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:03:53,788 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:04:00,297 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 15:04:00,298 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:00,301 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:04:00,303 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 15:04:06,830 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:04:06,830 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 15:04:06,832 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:04:06,832 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:04:08,483 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:04:08,487 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:04:08,487 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:08,487 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:08,488 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:04:08,489 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:04:08,491 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:04:08,491 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:04:08,492 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:04:08,492 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:04:08,494 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:04:08,496 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:04:08,498 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:04:09,283 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:04:09,284 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 66(Integer)
2019-07-25 15:04:09,287 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:04:09,288 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }
}
2019-07-25 15:04:10,303 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:04:10,304 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:04:10,304 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:10,305 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:10,308 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:04:10,309 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:04:10,308 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:04:10,309 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:04:10,309 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:04:10,309 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:04:10,309 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:04:10,311 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:04:10,312 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:04:11,238 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 15:04:11,239 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:11,241 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:04:11,242 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 15:04:12,144 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:04:12,144 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 15:04:12,146 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:04:12,147 DEBUG (NewsController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  }
}
2019-07-25 15:04:13,970 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:04:13,972 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:13,970 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:04:13,974 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:13,976 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:04:13,976 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:04:13,977 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:04:13,977 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:04:13,977 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:04:13,978 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:04:13,980 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:04:13,980 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:04:13,985 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:04:15,460 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news order by writeDate desc 
2019-07-25 15:04:15,461 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:04:15,463 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:04:15,464 DEBUG (NewsController.java:32)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 69,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }, {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }, {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  } ]
}
2019-07-25 15:05:05,874 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 9964 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 15:05:05,874 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 15:05:05,874 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 15:05:06,557 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 0.715 seconds (JVM running for 2320.972)
2019-07-25 15:14:30,039 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 7320 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 15:14:30,051 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 15:14:30,052 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 15:14:33,904 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 5.076 seconds (JVM running for 7.611)
2019-07-25 15:15:08,353 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 15:15:08,378 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:15:08,401 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:08,403 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 15:15:08,403 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:15:08,405 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:08,406 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 15:15:08,406 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:15:08,408 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:10,197 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:15:10,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:15:10,205 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:15:10,207 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:15:10,208 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:15:10,216 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:10,270 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:15:11,169 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:15:11,170 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:15:11,173 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:15:11,174 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:15:11,175 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:15:11,177 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:11,178 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:15:12,729 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:15:12,730 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:15:12,733 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:15:12,734 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:15:12,734 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:15:12,736 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:12,736 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:15:13,334 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:15:13,334 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:15:13,336 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:15:13,337 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:15:13,337 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:15:13,339 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:13,340 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:15:13,880 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:15:13,881 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:15:13,885 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:15:13,886 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:15:13,886 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:15:13,888 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:13,890 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:15:23,649 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:15:23,650 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:15:23,653 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:15:23,655 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:15:23,656 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:15:23,658 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:15:23,659 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:16:23,861 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:16:23,862 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:16:23,868 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:16:23,870 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:16:23,871 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:16:23,872 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:16:23,873 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:16:24,799 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:16:24,800 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:16:24,803 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:16:24,804 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:16:24,804 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:16:24,806 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:16:24,807 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:16:26,342 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:16:26,343 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 71(Integer)
2019-07-25 15:16:26,346 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:16:26,348 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 71,
    "title" : "桂林最好玩的地方",
    "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:16:35,614 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO news VALUES(NULL,?,? ,?) 
2019-07-25 15:16:35,645 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: ahhaha(String), adasdsad(String), 2019-07-25 00:00:00.0(Timestamp)
2019-07-25 15:16:35,655 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:16:37,900 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:16:37,901 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:16:37,905 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:16:37,906 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:16:37,908 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:16:37,910 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:16:37,911 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:16:43,533 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:16:43,534 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:16:43,536 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:16:43,537 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:16:43,539 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:16:43,542 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:16:43,542 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:16:44,825 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:16:44,826 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:16:44,829 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:16:44,831 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:16:44,832 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:16:44,834 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:16:44,834 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:16:46,379 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:16:46,380 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:16:46,385 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:16:46,386 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:16:46,387 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:16:46,389 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:16:46,389 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:16:47,457 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:16:47,458 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:16:47,460 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:16:47,461 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:16:47,461 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:16:47,463 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:16:47,463 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:16:59,393 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 15:16:59,394 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:16:59,398 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:16:59,401 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 15:17:08,517 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:17:08,518 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:17:08,521 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:17:08,524 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:17:08,525 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:17:08,525 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:17:08,526 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:17:08,526 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:17:08,527 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:17:08,533 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:17:08,532 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:17:08,536 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:17:08,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:17:57,190 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:17:57,191 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:17:57,197 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:17:57,197 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:17:57,197 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:17:57,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:17:57,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:17:57,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:17:57,200 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:17:57,204 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:17:57,205 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:17:57,205 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:17:57,206 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:17:57,562 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:17:57,564 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:17:57,565 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:17:57,566 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:17:57,567 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:17:57,567 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:17:57,568 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:17:57,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:17:57,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:17:57,571 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:17:57,574 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:17:57,575 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:17:57,576 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:17:59,563 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:17:59,564 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:17:59,568 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:17:59,569 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:17:59,570 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:17:59,572 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:17:59,573 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:18:01,411 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:18:01,412 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:18:01,415 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:18:01,416 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:18:01,417 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:18:01,418 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:18:01,419 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:18:02,358 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:18:02,359 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:18:02,361 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:18:02,362 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:18:02,362 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:18:02,364 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:18:02,365 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:18:11,110 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:18:11,111 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:18:11,113 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:18:11,115 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:18:11,115 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:18:11,117 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:18:11,119 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:18:14,544 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:18:14,545 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:18:14,548 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:18:14,550 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:18:15,599 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:18:15,600 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:18:15,602 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:18:15,603 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:18:15,604 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:18:15,606 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:18:15,607 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:18:16,287 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:18:16,288 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:18:16,290 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:18:16,291 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:18:16,291 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:18:16,293 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:18:16,293 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:18:23,253 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:18:23,254 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:18:23,259 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:18:23,259 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:18:23,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:18:23,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:18:23,259 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:18:23,261 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:18:23,263 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:18:23,263 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:18:23,264 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:18:23,264 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:18:23,266 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:07,825 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:20:07,826 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:07,831 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:20:07,832 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:07,832 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:20:07,832 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:20:07,834 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:07,834 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:20:07,835 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:07,835 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:20:07,837 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:07,839 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:07,841 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:20:13,075 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:20:13,076 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:13,077 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:20:13,079 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:13,082 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:13,083 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:20:13,083 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:13,083 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:20:13,084 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:20:13,084 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:20:13,085 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:20:13,087 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:13,087 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:15,259 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:20:15,259 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:15,259 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:20:15,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:20:15,260 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:15,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:15,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:15,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:20:15,269 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:20:15,269 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:15,269 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:15,270 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:20:15,272 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:20:16,946 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:20:16,946 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:20:16,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:16,948 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:16,949 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:16,950 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:20:16,950 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:20:16,952 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:16,952 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:20:16,955 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:16,955 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:16,955 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:20:16,956 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:20:18,598 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:20:18,599 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:18,604 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:18,604 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:18,605 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:20:18,605 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:20:18,605 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:20:18,610 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:18,610 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:18,614 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:20:18,615 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:18,620 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:20:18,621 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:20:20,144 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:20:20,145 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:20,149 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:20:20,150 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:20,150 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:20,150 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:20,151 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:20:20,151 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:20:20,151 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:20:20,152 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:20:20,155 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:20,155 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:20,158 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:20:20,931 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:20:20,933 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:20,939 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:20:20,941 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:20:22,196 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:20:22,197 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:20:22,200 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:22,201 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:20:22,201 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:22,204 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:20:22,206 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:20:39,183 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:20:39,183 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:39,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:39,183 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:20:39,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:20:39,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:20:39,187 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:20:39,188 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:20:39,188 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:20:39,191 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:39,191 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:20:39,191 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:20:39,192 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:21:57,945 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:21:57,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 67(Integer)
2019-07-25 15:21:57,949 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:21:57,950 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:21:58,653 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:21:58,654 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 67(Integer)
2019-07-25 15:21:58,657 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:21:58,658 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:21:58,903 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:21:58,905 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 67(Integer)
2019-07-25 15:21:58,907 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:21:58,908 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 67,
    "title" : "一条新闻",
    "content" : "新闻新闻新闻",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:22:02,486 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:22:02,487 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:22:02,490 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:22:02,491 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:22:02,491 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:22:02,491 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:22:02,491 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:22:02,493 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:22:02,494 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:22:02,496 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:22:02,496 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:22:02,495 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:22:02,500 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:22:03,619 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:22:03,620 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 15:22:03,622 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:22:03,623 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  }
}
2019-07-25 15:22:04,992 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:22:04,993 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:22:04,997 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:22:04,998 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:22:06,661 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:22:06,662 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:22:06,665 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:22:06,666 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:22:06,667 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:22:06,669 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:22:06,670 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:22:09,696 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:22:09,698 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 70(Integer)
2019-07-25 15:22:09,699 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:22:09,700 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:22:11,353 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:22:11,354 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:22:11,358 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:22:11,358 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:22:11,358 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:22:11,358 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:22:11,359 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:22:11,360 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:22:11,360 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:22:11,361 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:22:11,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:22:11,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:22:11,363 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:22:15,049 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 15:22:15,050 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:22:15,051 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:22:15,051 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:22:15,051 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:22:15,051 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:22:15,052 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:22:15,052 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:22:15,055 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:22:15,055 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 9
2019-07-25 15:22:15,055 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:22:15,055 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:22:15,058 DEBUG (ProductController.java:29)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 10,
    "serialNumber" : "鞋子",
    "name" : "鞋子",
    "brand" : "鞋子",
    "model" : "鞋子",
    "price" : 10000,
    "picture" : "hulu6.jpg",
    "description" : "好鞋子"
  }, {
    "productId" : 11,
    "serialNumber" : "qq",
    "name" : "qqq",
    "brand" : "qq",
    "model" : "qq",
    "price" : 100,
    "picture" : "hulu5.jpg",
    "description" : "111"
  } ]
}
2019-07-25 15:24:59,090 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 15:24:59,091 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:24:59,093 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:24:59,094 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 15:24:59,095 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:24:59,097 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:24:59,098 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 15:24:59,099 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:24:59,100 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:00,578 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 7320 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 15:25:00,578 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 15:25:00,579 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 15:25:01,523 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 0.999 seconds (JVM running for 635.231)
2019-07-25 15:25:04,343 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:25:04,345 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:25:04,347 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:25:04,348 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:25:04,348 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:04,350 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:04,357 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:25:05,762 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:25:05,763 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:25:05,764 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:25:05,764 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:25:05,765 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:05,766 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:05,767 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    }, {
      "productId" : 10,
      "serialNumber" : "鞋子",
      "name" : "鞋子",
      "brand" : "鞋子",
      "model" : "鞋子",
      "price" : 10000,
      "picture" : "hulu6.jpg",
      "description" : "好鞋子"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:25:06,150 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:25:06,150 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 8(Integer), 4(Integer)
2019-07-25 15:25:06,152 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:06,153 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:25:06,153 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:06,155 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:06,155 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 3,
    "pageData" : [ {
      "productId" : 11,
      "serialNumber" : "qq",
      "name" : "qqq",
      "brand" : "qq",
      "model" : "qq",
      "price" : 100,
      "picture" : "hulu5.jpg",
      "description" : "111"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:25:07,097 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:25:07,097 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:25:07,099 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:25:07,100 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:25:07,101 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:07,102 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:07,103 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    }, {
      "productId" : 10,
      "serialNumber" : "鞋子",
      "name" : "鞋子",
      "brand" : "鞋子",
      "model" : "鞋子",
      "price" : 10000,
      "picture" : "hulu6.jpg",
      "description" : "好鞋子"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:25:07,846 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:25:07,847 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:25:07,852 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:25:07,852 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:25:07,853 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:07,854 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:07,856 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:25:08,280 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:25:08,280 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:25:08,282 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:25:08,283 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:25:08,283 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:08,284 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:08,285 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    }, {
      "productId" : 10,
      "serialNumber" : "鞋子",
      "name" : "鞋子",
      "brand" : "鞋子",
      "model" : "鞋子",
      "price" : 10000,
      "picture" : "hulu6.jpg",
      "description" : "好鞋子"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:25:09,224 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 15:25:09,225 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 15:25:09,227 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:09,229 DEBUG (ProductController.java:60)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }
}
2019-07-25 15:25:14,404 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:25:14,405 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:25:14,408 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:25:14,409 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:25:14,409 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:14,412 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:14,413 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:25:15,606 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 15:25:15,607 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 15:25:15,609 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:15,610 DEBUG (ProductController.java:60)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 15:25:21,281 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:25:21,282 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:25:21,284 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:25:21,286 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:25:21,287 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:21,290 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:21,291 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:25:26,823 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users 
2019-07-25 15:25:26,824 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:26,826 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:25:26,829 DEBUG (UsersController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "userId" : 1,
    "userName" : "admin",
    "password" : "admin",
    "status" : 1
  }, {
    "userId" : 2,
    "userName" : "zzg",
    "password" : "zzg",
    "status" : 1
  }, {
    "userId" : 3,
    "userName" : "bobo",
    "password" : "bobo",
    "status" : 0
  }, {
    "userId" : 5,
    "userName" : "我",
    "password" : "1234",
    "status" : 1
  }, {
    "userId" : 7,
    "userName" : "罗军",
    "password" : "123",
    "status" : 1
  }, {
    "userId" : 8,
    "userName" : "luo",
    "password" : "123",
    "status" : 1
  }, {
    "userId" : 9,
    "userName" : "luojun 2",
    "password" : "123",
    "status" : 1
  } ]
}
2019-07-25 15:25:30,369 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:25:30,370 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:25:30,373 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:25:37,484 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 15:25:37,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:25:37,486 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:37,486 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 15:25:37,487 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:25:37,488 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:37,489 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 15:25:37,489 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:25:37,490 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:25:59,132 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:01,513 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:01,686 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:01,823 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:02,592 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:02,736 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:02,870 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:03,006 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:03,142 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:03,278 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:03,712 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:26:03,857 ERROR (BaseController.java:295)- 系统异常:org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 1 errors
Field error in object 'product' on field 'price': rejected value [鞋子]; codes [typeMismatch.product.price,typeMismatch.price,typeMismatch.java.math.BigDecimal,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [product.price,price]; arguments []; default message [price]]; default message [Failed to convert value of type 'java.lang.String[]' to required type 'java.math.BigDecimal'; nested exception is java.lang.NumberFormatException]
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.constructAttribute(ModelAttributeMethodProcessor.java:317)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.createAttribute(ModelAttributeMethodProcessor.java:224)
	at org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.createAttribute(ServletModelAttributeMethodProcessor.java:84)
	at org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:139)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 15:27:20,209 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:27:20,210 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:27:20,212 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:27:20,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:27:20,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:27:20,215 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:27:20,216 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 3,
    "dataCount" : 9
  }
}
2019-07-25 15:27:33,732 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?) 
2019-07-25 15:27:33,733 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 111111(String), 1111111111(String), 111111111111(String), 1111111111111(String), 11111111111(BigDecimal), hulu7.jpg(String), 111111111111(String)
2019-07-25 15:27:33,840 ERROR (BaseController.java:281)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
### The error may exist in com/zryx/company/mapper/ProductMapper.xml
### The error may involve com.zryx.company.mapper.ProductMapper.addProduct-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
; Data truncation: Out of range value for column 'price' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy63.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy87.addProduct(Unknown Source)
	at com.zryx.company.service.imp.ProductServiceImpl.addProduct(ProductServiceImpl.java:30)
	at com.zryx.company.controller.ProductController.addProduct(ProductController.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-25 15:27:34,287 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?) 
2019-07-25 15:27:34,288 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 111111(String), 1111111111(String), 111111111111(String), 1111111111111(String), 11111111111(BigDecimal), hulu7.jpg(String), 111111111111(String)
2019-07-25 15:27:34,290 ERROR (BaseController.java:281)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
### The error may exist in com/zryx/company/mapper/ProductMapper.xml
### The error may involve com.zryx.company.mapper.ProductMapper.addProduct-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
; Data truncation: Out of range value for column 'price' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy63.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy87.addProduct(Unknown Source)
	at com.zryx.company.service.imp.ProductServiceImpl.addProduct(ProductServiceImpl.java:30)
	at com.zryx.company.controller.ProductController.addProduct(ProductController.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-25 15:27:34,448 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?) 
2019-07-25 15:27:34,450 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 111111(String), 1111111111(String), 111111111111(String), 1111111111111(String), 11111111111(BigDecimal), hulu7.jpg(String), 111111111111(String)
2019-07-25 15:27:34,451 ERROR (BaseController.java:281)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
### The error may exist in com/zryx/company/mapper/ProductMapper.xml
### The error may involve com.zryx.company.mapper.ProductMapper.addProduct-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
; Data truncation: Out of range value for column 'price' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy63.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy87.addProduct(Unknown Source)
	at com.zryx.company.service.imp.ProductServiceImpl.addProduct(ProductServiceImpl.java:30)
	at com.zryx.company.controller.ProductController.addProduct(ProductController.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-25 15:27:34,592 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?) 
2019-07-25 15:27:34,592 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 111111(String), 1111111111(String), 111111111111(String), 1111111111111(String), 11111111111(BigDecimal), hulu7.jpg(String), 111111111111(String)
2019-07-25 15:27:34,594 ERROR (BaseController.java:281)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
### The error may exist in com/zryx/company/mapper/ProductMapper.xml
### The error may involve com.zryx.company.mapper.ProductMapper.addProduct-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
; Data truncation: Out of range value for column 'price' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy63.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy87.addProduct(Unknown Source)
	at com.zryx.company.service.imp.ProductServiceImpl.addProduct(ProductServiceImpl.java:30)
	at com.zryx.company.controller.ProductController.addProduct(ProductController.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-25 15:27:34,734 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?) 
2019-07-25 15:27:34,735 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 111111(String), 1111111111(String), 111111111111(String), 1111111111111(String), 11111111111(BigDecimal), hulu7.jpg(String), 111111111111(String)
2019-07-25 15:27:34,737 ERROR (BaseController.java:281)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
### The error may exist in com/zryx/company/mapper/ProductMapper.xml
### The error may involve com.zryx.company.mapper.ProductMapper.addProduct-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
; Data truncation: Out of range value for column 'price' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy63.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy87.addProduct(Unknown Source)
	at com.zryx.company.service.imp.ProductServiceImpl.addProduct(ProductServiceImpl.java:30)
	at com.zryx.company.controller.ProductController.addProduct(ProductController.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-25 15:27:34,878 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?) 
2019-07-25 15:27:34,878 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 111111(String), 1111111111(String), 111111111111(String), 1111111111111(String), 11111111111(BigDecimal), hulu7.jpg(String), 111111111111(String)
2019-07-25 15:27:34,880 ERROR (BaseController.java:281)- 操作数据库出现异常:名称重复，外键关联
org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
### The error may exist in com/zryx/company/mapper/ProductMapper.xml
### The error may involve com.zryx.company.mapper.ProductMapper.addProduct-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
; Data truncation: Out of range value for column 'price' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy63.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy87.addProduct(Unknown Source)
	at com.zryx.company.service.imp.ProductServiceImpl.addProduct(ProductServiceImpl.java:30)
	at com.zryx.company.controller.ProductController.addProduct(ProductController.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Out of range value for column 'price' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:955)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:372)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy79.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 61 common frames omitted
2019-07-25 15:28:41,724 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO product VALUES(NULL,?,?,?,?,?,?,?) 
2019-07-25 15:28:41,725 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 111111(String), 1111111111(String), 111111111111(String), 1111111111111(String), 198(BigDecimal), hulu7.jpg(String), 111111111111(String)
2019-07-25 15:28:41,732 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:28:43,049 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:28:43,049 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:28:43,051 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:28:43,052 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:28:43,052 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:28:43,054 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:28:43,055 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 3,
    "dataCount" : 10
  }
}
2019-07-25 15:28:45,426 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:28:45,426 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 8(Integer), 4(Integer)
2019-07-25 15:28:45,428 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 15:28:45,429 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:28:45,429 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:28:45,430 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:28:45,431 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 3,
    "pageData" : [ {
      "productId" : 11,
      "serialNumber" : "qq",
      "name" : "qqq",
      "brand" : "qq",
      "model" : "qq",
      "price" : 100,
      "picture" : "hulu5.jpg",
      "description" : "111"
    }, {
      "productId" : 13,
      "serialNumber" : "111111",
      "name" : "1111111111",
      "brand" : "111111111111",
      "model" : "1111111111111",
      "price" : 198,
      "picture" : "hulu7.jpg",
      "description" : "111111111111"
    } ],
    "pageCount" : 3,
    "dataCount" : 10
  }
}
2019-07-25 15:29:00,868 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM product WHERE productId = ? 
2019-07-25 15:29:00,869 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 11(Integer)
2019-07-25 15:29:00,871 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM product WHERE productId = ? 
2019-07-25 15:29:00,871 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 13(Integer)
2019-07-25 15:29:00,879 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:29:00,879 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:29:00,885 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:29:00,886 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:29:00,887 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:29:00,888 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:29:00,889 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:29:00,889 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:29:00,890 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:29:00,892 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:29:00,892 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:29:00,892 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:29:00,892 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:29:00,893 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:29:00,895 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:29:00,896 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:29:06,354 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:29:06,355 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:29:06,356 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:29:06,356 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:29:06,356 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:29:06,357 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:29:06,358 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    }, {
      "productId" : 10,
      "serialNumber" : "鞋子",
      "name" : "鞋子",
      "brand" : "鞋子",
      "model" : "鞋子",
      "price" : 10000,
      "picture" : "hulu6.jpg",
      "description" : "好鞋子"
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:29:09,971 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM product WHERE productId = ? 
2019-07-25 15:29:09,971 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 10(Integer)
2019-07-25 15:29:09,974 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:29:09,981 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:29:09,981 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:29:09,983 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:29:09,983 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:29:09,984 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:29:09,985 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:29:09,985 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:29:12,865 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:29:12,865 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:29:12,868 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:29:12,869 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:29:12,870 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:29:12,872 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:29:12,874 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:29:47,164 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 15:29:47,165 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:29:47,168 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 15:29:47,169 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 15:30:54,907 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:30:54,907 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:30:54,912 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:31:12,689 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:31:12,690 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:31:12,694 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:33:34,673 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:33:34,673 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:33:34,674 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:33:34,674 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:33:34,681 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:33:34,681 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:33:34,681 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:33:34,681 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:33:34,681 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:33:34,685 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:33:34,685 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:33:34,687 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:33:34,687 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:33:34,688 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:33:34,689 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:33:34,691 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:33:51,720 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:33:51,720 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:33:51,721 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:33:51,721 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:33:51,725 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:33:51,725 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:33:51,725 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:33:51,725 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:33:51,725 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:33:51,725 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:33:51,726 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:33:51,726 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:33:51,729 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:33:51,729 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:33:51,729 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:33:51,730 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:07,547 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:07,548 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:34:07,552 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:07,554 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:07,554 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:34:07,554 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:07,554 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:07,557 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:07,558 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:07,559 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:34:07,559 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:07,559 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:07,560 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:34:07,560 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:34:07,563 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:34:07,563 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:34,142 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:34:34,142 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:34,144 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:34:34,144 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:34,144 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:34,144 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:34,144 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:34:34,144 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:34:34,148 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:34:34,148 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:34:34,148 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:34,148 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:34,149 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:34,149 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:34,155 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:34,156 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:35,105 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:35,105 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:34:35,107 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:35,108 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:35,108 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:35,110 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:34:35,111 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:35,111 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:35,111 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:35,111 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:35,112 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:34:35,112 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:34:35,112 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:35,116 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:34:35,116 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:34:35,117 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:39,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:39,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:34:39,188 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:39,189 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:39,189 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:39,191 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:39,192 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:40,674 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:40,675 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:34:40,677 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:34:40,677 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:40,678 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:40,679 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:40,680 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:42,609 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:42,609 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:34:42,611 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:42,612 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:42,612 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:42,614 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:42,614 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:43,492 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 15:34:43,492 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:34:43,495 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:43,496 DEBUG (ProductController.java:60)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }
}
2019-07-25 15:34:45,260 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:45,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:34:45,263 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:34:45,265 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:45,267 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:45,266 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:45,267 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:34:45,267 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:45,268 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:45,272 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:45,273 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:45,273 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:45,273 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:34:45,274 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:45,273 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:34:45,276 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:34:46,093 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 15:34:46,094 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer)
2019-07-25 15:34:46,097 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:46,098 DEBUG (ProductController.java:60)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 15:34:48,013 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:48,014 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:34:48,020 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:34:48,020 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:48,020 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:48,021 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:48,021 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:48,023 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:48,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:34:48,025 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:48,025 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:48,025 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:34:48,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:34:48,026 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:48,028 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:48,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:34:54,671 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:34:54,671 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:34:54,672 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:34:54,672 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:54,675 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:54,675 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:34:54,675 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:54,675 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:34:54,675 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:34:54,675 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:34:54,676 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:34:54,676 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:34:54,680 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:34:54,680 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:34:54,680 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:54,681 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:34:58,579 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 15:34:58,579 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:34:58,583 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:58,584 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 15:34:58,584 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:34:58,586 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:34:58,587 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 15:34:58,587 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 15:34:58,589 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:35:07,725 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:35:07,726 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:35:07,727 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:35:07,728 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:35:07,728 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:35:07,728 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:35:07,728 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:35:07,729 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:35:07,729 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:35:07,731 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:35:07,731 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:35:07,731 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:35:07,731 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:35:07,731 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:35:07,731 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:35:07,734 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:37:36,182 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:37:36,182 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:37:36,182 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:37:36,182 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:37:36,186 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:37:36,186 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:37:36,187 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:37:36,187 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:37:36,187 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:37:36,187 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:37:36,188 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:37:36,190 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:37:36,193 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:37:36,193 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:37:36,194 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:37:36,194 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:37:39,132 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 7320 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 15:37:39,133 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 15:37:39,133 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 15:37:39,817 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 0.722 seconds (JVM running for 1393.524)
2019-07-25 15:37:45,385 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:37:45,387 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:37:45,388 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:37:45,388 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:37:45,389 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:37:45,390 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:37:45,397 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "我",
      "password" : "1234",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:37:46,866 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:37:46,867 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:37:46,868 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:37:46,869 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:37:46,869 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:37:46,870 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:37:46,870 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 7,
      "userName" : "罗军",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 9,
      "userName" : "luojun 2",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:37:48,184 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:37:48,185 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:37:48,187 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:37:48,187 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:37:48,187 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:37:48,188 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:37:48,189 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "我",
      "password" : "1234",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:37:51,704 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:37:51,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: (String)
2019-07-25 15:37:51,707 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:37:51,708 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查无信息",
  "code" : -1
}
2019-07-25 15:37:59,183 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO users VALUES(NULL,? ,? ,?) 
2019-07-25 15:37:59,184 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 11(String), 111(String), 1(Integer)
2019-07-25 15:37:59,185 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:38:02,064 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:02,065 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:02,067 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:02,068 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:02,068 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:02,070 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:02,073 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "我",
      "password" : "1234",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:38:02,936 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:02,937 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:38:02,939 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:02,939 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:02,940 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:02,940 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:02,941 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 7,
      "userName" : "罗军",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 9,
      "userName" : "luojun 2",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:38:06,208 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:38:06,209 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 11(String)
2019-07-25 15:38:06,211 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:06,212 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 11,
    "userName" : "11",
    "password" : "111",
    "status" : 1
  }
}
2019-07-25 15:38:08,703 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:08,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:08,707 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:08,707 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:08,708 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:08,709 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:08,711 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "我",
      "password" : "1234",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:38:10,851 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:38:10,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: admin(String)
2019-07-25 15:38:10,854 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:10,855 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 1,
    "userName" : "admin",
    "password" : "admin",
    "status" : 1
  }
}
2019-07-25 15:38:12,203 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:12,204 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:12,205 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:12,206 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:12,207 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:12,208 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:12,208 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "我",
      "password" : "1234",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:38:14,796 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:38:14,797 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: bobo(String)
2019-07-25 15:38:14,799 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:14,799 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 3,
    "userName" : "bobo",
    "password" : "bobo",
    "status" : 0
  }
}
2019-07-25 15:38:16,211 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:16,211 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:16,213 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:16,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:16,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:16,215 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:16,215 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "我",
      "password" : "1234",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:38:19,851 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:38:19,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: (String)
2019-07-25 15:38:19,854 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:38:19,855 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查无信息",
  "code" : -1
}
2019-07-25 15:38:23,223 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:23,224 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:23,225 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:23,226 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:23,226 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:23,228 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:23,228 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "我",
      "password" : "1234",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:38:25,916 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:38:25,916 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: (String)
2019-07-25 15:38:25,918 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:38:25,918 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查无信息",
  "code" : -1
}
2019-07-25 15:38:27,790 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:27,791 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:27,792 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:27,793 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:27,793 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:27,795 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:27,796 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "我",
      "password" : "1234",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:38:30,682 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM users WHERE userId = ? 
2019-07-25 15:38:30,683 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 5(Integer)
2019-07-25 15:38:30,685 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:38:32,009 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:32,010 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:32,011 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:32,012 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:32,012 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:32,014 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:32,015 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 7,
      "userName" : "罗军",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:38:33,784 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:33,784 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:38:33,785 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:38:33,786 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:33,786 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:33,787 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:33,787 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 9,
      "userName" : "luojun 2",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:38:34,630 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:34,631 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:34,632 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:34,632 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:34,633 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:34,634 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:34,635 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 7,
      "userName" : "罗军",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:38:36,764 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:38:36,765 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: (String)
2019-07-25 15:38:36,766 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:38:36,767 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查无信息",
  "code" : -1
}
2019-07-25 15:38:38,165 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:38,166 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:38,167 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:38,168 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:38,168 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:38,170 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:38,171 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 7,
      "userName" : "罗军",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:38:42,154 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM users WHERE userId = ? 
2019-07-25 15:38:42,155 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 15:38:42,157 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:38:43,162 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:43,163 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:43,164 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:43,165 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:43,165 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:43,166 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:43,166 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:38:45,628 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:38:45,628 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 15:38:45,630 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:45,631 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 8,
    "userName" : "luo",
    "password" : "123",
    "status" : 1
  }
}
2019-07-25 15:38:46,735 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:46,735 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:46,737 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:46,737 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:46,738 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:46,740 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:46,743 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:38:47,880 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:47,881 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:38:47,882 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 15:38:47,882 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:47,883 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:47,883 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:47,884 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 9,
      "userName" : "luojun 2",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:38:50,227 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:38:50,228 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luojun(String)
2019-07-25 15:38:50,229 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:38:50,230 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查无信息",
  "code" : -1
}
2019-07-25 15:38:56,120 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:56,120 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:38:56,122 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:38:56,123 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:56,123 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:56,125 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:56,126 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:38:58,289 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:38:58,290 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:38:58,291 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 15:38:58,291 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:38:58,292 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:38:58,293 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:38:58,293 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 9,
      "userName" : "luojun 2",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:00,915 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:39:00,916 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luojun(String)
2019-07-25 15:39:00,917 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:39:00,918 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查无信息",
  "code" : -1
}
2019-07-25 15:39:02,532 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:02,533 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:02,535 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:02,535 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:02,535 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:02,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:02,537 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:05,433 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:05,434 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:39:05,435 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 15:39:05,435 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:05,435 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:05,436 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:05,436 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 9,
      "userName" : "luojun 2",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:07,955 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:39:07,956 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luojun(String)
2019-07-25 15:39:07,958 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 15:39:07,959 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查无信息",
  "code" : -1
}
2019-07-25 15:39:10,069 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:10,070 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:10,071 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:10,073 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:10,073 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:10,075 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:10,075 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:11,996 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:39:11,997 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 15:39:11,999 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:12,000 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 8,
    "userName" : "luo",
    "password" : "123",
    "status" : 1
  }
}
2019-07-25 15:39:14,282 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:14,283 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:14,284 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:14,285 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:14,285 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:14,287 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:14,287 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:15,241 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:15,242 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:39:15,243 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 15:39:15,244 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:15,245 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:15,245 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:15,246 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 9,
      "userName" : "luojun 2",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:17,659 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 15:39:17,660 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 11(String)
2019-07-25 15:39:17,662 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:17,663 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 11,
    "userName" : "11",
    "password" : "111",
    "status" : 1
  }
}
2019-07-25 15:39:18,860 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:18,861 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:18,863 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:18,864 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:18,864 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:18,866 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:18,867 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:20,569 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:20,569 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:39:20,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 15:39:20,570 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:20,570 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:20,571 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:20,572 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 9,
      "userName" : "luojun 2",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:23,843 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM users WHERE userId = ? 
2019-07-25 15:39:23,844 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 9(Integer)
2019-07-25 15:39:23,845 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:39:24,946 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:24,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:24,948 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:24,949 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:24,949 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:24,951 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:24,952 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 5
  }
}
2019-07-25 15:39:34,051 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO users VALUES(NULL,? ,? ,?) 
2019-07-25 15:39:34,052 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luojun(String), 123(String), 1(Integer)
2019-07-25 15:39:34,053 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 15:39:36,464 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:36,465 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:36,467 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:36,467 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:36,468 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:36,470 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:36,470 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:39,673 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 15:39:39,673 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 15:39:39,674 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 15:39:39,675 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 15:39:39,676 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:39,677 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:39,677 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 12,
      "userName" : "luojun",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 15:39:44,699 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:39:44,701 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:44,702 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:39:44,702 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:44,704 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:44,705 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:39:44,705 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:39:44,706 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:39:44,706 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:39:44,706 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:39:44,706 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:44,706 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:39:44,708 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:44,708 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:44,708 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:39:44,716 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:39:48,760 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:39:48,761 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 66(Integer)
2019-07-25 15:39:48,762 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:48,763 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 66,
    "title" : "今天下大雨",
    "content" : "今天下大雨 大雨",
    "writeDate" : 1563667200000
  }
}
2019-07-25 15:39:49,968 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:39:49,968 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:49,970 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:49,972 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:39:49,974 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:49,976 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:49,977 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:39:51,119 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 15:39:51,120 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:39:51,125 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:51,126 DEBUG (ProductController.java:60)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }
}
2019-07-25 15:39:52,122 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:39:52,123 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:52,125 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:52,126 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:39:52,127 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:52,128 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:52,128 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:39:53,037 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:39:53,038 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 70(Integer)
2019-07-25 15:39:53,039 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:53,040 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:39:55,372 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:39:55,372 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:39:55,373 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:55,373 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:55,373 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:39:55,373 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:39:55,375 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:39:55,375 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:55,375 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:39:55,375 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:55,376 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:39:55,376 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:55,377 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:39:55,377 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:39:55,379 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:55,380 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:39:56,406 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:39:56,406 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:56,408 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:56,409 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:39:56,411 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:56,414 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:56,415 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:39:57,179 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 15:39:57,180 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:39:57,181 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:39:57,182 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 15:39:57,182 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:39:57,183 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:57,183 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 15:39:58,051 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:39:58,051 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 70(Integer)
2019-07-25 15:39:58,052 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:39:58,053 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:40:01,088 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:40:01,089 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:40:01,090 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:40:01,091 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:40:01,091 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:40:01,092 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:40:01,092 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:40:01,092 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:40:01,092 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:40:01,092 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:40:01,093 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:40:01,093 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:40:01,093 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:40:01,094 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:40:01,094 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:40:01,094 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:45:09,001 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:45:09,001 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:45:09,002 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:45:09,003 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:45:09,004 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:45:09,005 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:45:09,007 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:45:10,519 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:45:10,519 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:45:10,520 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:45:10,520 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:45:10,521 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:45:10,521 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:45:10,522 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:45:10,522 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:45:10,522 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:45:10,523 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:45:10,523 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:45:10,524 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:45:10,524 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:45:10,525 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:45:10,526 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:45:10,527 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:46:04,914 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:46:04,915 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:46:04,915 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:46:04,916 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:46:04,916 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:46:04,917 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:46:04,917 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:46:04,917 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:46:04,918 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:46:04,917 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:46:04,919 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:46:04,921 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:46:04,921 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:46:04,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:46:04,924 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:46:04,925 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:46:05,972 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 15:46:05,973 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 68(Integer)
2019-07-25 15:46:05,974 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:46:05,974 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 68,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 15:46:07,086 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:46:07,087 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:46:07,088 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:46:07,088 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:46:07,088 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:46:07,089 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:46:07,089 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:46:07,089 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:46:07,089 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:46:07,091 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:46:07,091 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:46:07,091 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:46:07,091 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:46:07,091 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:46:07,092 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:46:07,095 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:46:07,829 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 15:46:07,830 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 6(Integer)
2019-07-25 15:46:07,831 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:46:07,832 DEBUG (ProductController.java:60)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }
}
2019-07-25 15:52:03,947 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:03,947 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:03,948 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:03,948 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:03,950 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:03,950 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:03,951 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:03,951 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:03,952 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:03,952 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:03,953 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:03,953 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:03,954 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:03,955 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:03,956 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:03,958 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:04,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:04,619 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:04,621 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:04,622 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:04,622 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:04,623 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:04,623 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:04,624 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:04,626 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:04,626 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:04,626 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:04,627 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:04,628 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:04,630 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:04,631 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:04,633 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:05,256 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:05,257 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:05,259 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:05,259 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:05,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:05,260 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:05,260 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:05,262 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:05,262 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:05,262 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:05,263 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:05,264 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:05,264 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:05,264 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:05,266 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:05,266 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:05,802 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:05,802 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:05,803 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:05,804 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:05,804 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:05,804 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:05,805 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:05,805 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:05,806 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:05,806 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:05,808 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:05,808 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:05,810 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:05,811 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:05,811 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:05,813 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:06,314 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:06,315 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:06,317 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:06,318 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:06,319 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:06,319 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:06,319 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:06,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:06,322 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:06,323 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:06,324 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:06,324 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:06,324 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:06,325 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:06,326 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:06,326 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:06,852 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:06,852 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:06,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:06,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:06,854 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:06,855 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:06,855 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:06,856 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:06,856 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:06,856 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:06,858 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:06,858 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:06,859 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:06,859 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:06,859 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:06,860 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:07,371 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:07,372 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:07,372 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:07,373 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:07,373 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:07,373 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:07,374 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:07,374 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:07,374 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:07,375 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:07,376 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:07,376 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:07,376 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:07,376 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:07,376 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:07,379 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:08,007 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:08,008 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:08,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:08,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:08,010 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:08,010 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:08,010 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:08,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:08,011 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:08,014 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:08,015 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:08,014 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:08,017 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:08,018 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:08,019 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:08,020 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:08,535 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:08,535 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:08,535 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:08,535 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:08,535 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:08,535 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:08,537 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:08,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:08,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:08,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:08,538 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:08,538 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:08,538 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:08,539 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:08,539 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:08,540 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:08,889 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:08,890 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:08,891 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:08,891 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:08,892 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:08,892 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:08,892 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:08,893 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:08,893 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:08,893 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:08,894 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:08,895 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:08,897 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:08,898 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:08,898 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:08,898 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:09,200 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:09,200 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:09,200 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:09,201 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:09,201 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:09,201 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:09,202 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:09,203 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:09,203 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:09,204 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:09,204 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:09,204 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:09,204 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:09,206 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:09,206 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:09,206 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:09,538 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:09,538 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:09,538 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:09,539 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:09,540 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:09,540 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:09,540 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:09,540 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:09,540 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:09,541 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:09,542 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:09,542 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:09,542 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:09,543 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:09,543 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:09,547 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:09,860 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:09,860 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:09,860 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:09,860 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:09,862 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:09,863 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:09,863 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:09,864 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:09,865 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:09,866 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:09,867 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:09,867 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:09,867 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:09,867 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:09,869 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:09,869 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:10,157 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:10,157 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:10,158 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:10,158 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:10,160 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:10,159 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:10,160 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:10,160 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:10,160 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:10,160 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:10,161 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:10,161 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:10,162 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:10,162 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:10,162 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:10,164 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:10,459 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:10,460 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:10,462 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:10,463 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:10,463 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:10,463 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:10,463 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:10,464 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:10,464 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:10,465 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:10,465 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:10,465 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:10,466 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:10,468 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:10,469 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:10,470 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:10,770 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:10,770 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:10,771 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:10,771 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:10,772 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:10,772 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:10,772 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:10,772 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:10,773 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:10,773 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:10,774 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:10,774 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:10,774 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:10,773 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:10,774 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:10,777 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:11,091 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:11,092 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:11,094 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:11,095 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:11,095 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:11,096 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:11,097 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:11,097 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:11,097 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:11,097 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:11,097 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:11,097 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:11,099 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:11,099 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:11,099 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:11,101 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:11,403 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:11,403 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:11,404 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:11,404 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:11,404 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:11,405 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:11,405 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:11,405 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:11,406 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:11,406 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:11,406 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:11,406 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:11,407 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:11,407 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:11,408 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:11,410 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:11,739 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:11,739 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:11,740 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:11,740 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:11,740 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:11,740 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:11,743 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:11,743 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:11,743 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:11,745 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:11,746 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:11,745 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:11,747 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:11,747 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:11,748 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:11,750 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:36,991 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:36,991 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:36,992 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:36,994 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:36,994 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:36,991 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:36,991 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:36,994 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:36,996 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:36,996 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:36,996 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:36,999 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:37,000 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:37,001 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:37,003 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:37,003 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:40,647 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:40,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:40,648 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:40,650 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:40,651 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:40,650 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:40,651 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:40,652 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:40,651 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:40,652 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:40,652 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:40,653 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:40,654 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:40,654 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:40,654 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:40,655 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:41,329 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:41,330 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:41,330 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:41,330 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:41,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:41,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:41,332 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:41,333 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:41,334 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:41,334 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:41,337 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:41,337 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:41,337 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:41,339 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:41,339 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:41,339 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:41,663 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:41,664 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:41,664 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:41,665 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:41,666 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:41,667 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:41,667 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:41,668 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:41,669 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:41,669 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:41,671 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:41,671 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:41,671 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:41,671 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:41,672 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:41,673 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:42,000 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:42,001 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:42,002 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:42,002 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:42,003 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:42,003 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:42,003 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:42,003 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:42,003 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:42,004 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:42,004 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:42,004 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:42,004 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:42,005 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:42,006 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:42,007 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:42,325 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:42,325 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:42,325 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:42,325 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:42,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:42,327 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:42,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:42,327 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:42,327 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:42,328 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:42,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:42,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:42,328 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:42,329 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:42,330 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:42,330 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:42,640 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:42,640 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:42,640 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:42,641 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:42,641 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:42,642 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:42,642 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:42,642 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:42,642 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:42,643 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:42,643 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:42,644 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:42,644 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:42,644 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:42,645 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:42,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:42,965 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:42,965 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:42,966 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:42,966 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:42,966 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:42,967 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:42,971 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:42,970 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:42,971 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:42,971 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:42,972 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:42,972 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:42,972 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:42,974 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:42,974 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:42,974 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:43,274 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:43,274 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:43,275 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:43,275 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:43,276 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:43,276 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:43,277 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:43,277 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:43,278 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:43,278 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:43,281 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:43,281 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:43,282 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:43,282 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:43,283 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:43,283 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:43,595 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:43,596 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:43,597 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:43,598 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:43,599 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:43,600 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:43,601 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:43,602 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:43,602 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:43,603 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:43,603 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:43,604 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:43,604 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:43,605 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:43,606 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:43,607 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:43,960 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:43,960 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:43,960 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:43,960 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:43,962 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:43,962 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:43,962 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:43,963 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:43,963 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:43,963 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:43,963 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:43,966 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:43,967 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:43,965 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:43,968 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:43,970 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:44,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:44,327 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:44,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:44,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:44,328 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:44,328 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:44,329 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:44,329 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:44,330 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:44,330 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:44,331 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:44,332 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:44,333 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:44,333 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:44,334 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:44,335 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:44,695 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:44,696 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:44,696 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:44,697 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:44,698 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:44,699 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:44,698 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:44,699 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:44,700 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:44,700 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:44,700 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:44,700 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:44,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:44,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:44,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:44,703 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:45,023 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:45,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:45,025 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:45,026 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:45,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:45,030 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:45,031 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:45,031 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:45,031 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:45,032 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:45,032 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:45,032 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:45,033 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:45,033 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:45,035 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:45,035 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:45,368 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:45,369 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:45,370 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:45,371 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:45,371 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:45,371 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:45,372 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:45,374 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:45,374 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:45,374 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:45,373 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:45,375 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:45,377 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:45,377 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:45,378 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:45,381 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:45,665 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:45,666 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:45,666 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:45,667 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:45,667 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:45,668 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:45,669 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:45,669 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:45,669 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:45,669 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:45,669 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:45,669 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:45,670 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:45,671 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:45,671 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:45,671 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:46,015 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:46,016 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:46,016 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:46,017 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:46,018 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:46,018 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:46,019 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:46,019 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:46,019 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:46,020 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:46,020 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:46,020 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:46,021 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:46,021 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:46,021 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:46,022 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:46,358 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:46,358 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:46,358 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:46,358 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:46,359 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:46,359 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:46,359 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:46,359 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:46,360 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:46,360 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:46,361 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:46,361 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:46,362 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:46,366 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:46,366 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:46,366 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:46,688 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:46,688 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:46,689 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:46,689 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:46,690 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:46,690 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:46,690 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:46,690 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:46,690 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:46,691 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:46,691 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:46,691 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:46,692 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:46,692 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:46,692 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:46,693 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:47,044 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:47,045 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:47,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:47,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:47,047 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:47,047 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:47,047 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:47,047 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:47,047 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:47,047 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:47,047 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:47,048 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:47,048 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:47,049 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:47,049 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:47,049 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:47,362 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:47,362 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:47,364 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:47,364 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:47,364 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:47,365 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:47,365 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:47,366 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:47,366 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:47,367 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:47,367 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:47,367 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:47,368 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:47,368 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:47,369 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:47,370 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:47,698 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:47,698 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:47,699 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:47,699 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:47,700 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:47,700 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:47,700 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:47,701 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:47,701 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:47,701 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:47,701 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:47,701 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:47,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:47,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:47,703 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:47,703 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:48,022 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:48,023 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:48,023 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:48,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:48,024 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:48,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:48,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:48,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:48,025 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:48,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:48,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:48,025 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:48,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:48,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:48,026 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:48,029 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:48,362 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:48,364 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:48,364 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:48,365 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:48,366 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:48,366 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:48,366 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:48,367 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:48,367 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:48,367 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:48,368 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:48,368 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:48,369 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:48,369 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:48,369 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:48,370 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:48,670 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:48,671 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:48,671 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:48,671 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:48,672 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:48,673 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:48,673 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:48,674 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:48,674 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:48,677 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:48,677 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:48,678 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:48,677 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:48,679 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:48,679 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:48,680 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:49,009 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:49,010 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:49,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:49,012 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:49,014 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:49,014 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:49,014 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:49,014 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:49,014 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:49,015 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:49,015 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:49,016 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:49,016 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:49,016 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:49,016 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:49,017 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:49,323 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:49,323 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:49,324 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:49,324 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:49,326 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:49,327 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:49,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:49,328 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:49,330 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:49,331 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:49,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:49,331 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:49,329 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:49,332 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:49,332 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:49,334 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:49,620 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:49,621 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:49,621 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:49,622 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:49,622 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:49,622 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:49,622 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:49,623 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:49,623 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:49,623 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:49,623 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:49,623 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:49,624 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:49,626 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:49,627 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:49,628 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:52:49,946 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:52:49,946 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:49,946 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:52:49,946 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:52:49,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:49,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:52:49,946 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:52:49,947 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:52:49,949 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:52:49,949 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:52:49,949 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:49,949 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:52:49,949 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:52:49,950 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:52:49,951 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:52:49,951 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:39,573 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:39,573 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:39,575 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:39,575 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:39,576 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:39,576 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:39,576 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:39,577 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:39,577 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:46,390 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:46,391 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:46,393 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:46,394 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:46,395 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:46,396 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:46,397 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:46,398 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:46,398 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:49,027 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:49,028 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:49,028 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:49,029 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:49,029 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:49,030 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:49,031 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:49,031 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:49,032 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:49,032 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:49,032 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:49,032 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:49,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:49,034 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:49,035 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:49,036 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:51,020 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:51,022 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:51,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:51,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:51,025 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:51,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:51,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:51,025 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:51,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:51,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:51,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:51,027 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:51,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:51,028 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:51,028 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:51,029 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:51,552 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:51,552 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:51,552 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:51,553 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:51,553 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:51,554 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:51,555 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:51,556 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:51,556 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:51,557 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:51,556 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:51,557 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:51,558 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:51,561 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:51,562 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:51,563 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:51,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:51,923 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:51,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:51,925 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:51,926 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:51,926 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:51,927 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:51,927 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:51,927 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:51,927 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:51,928 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:51,928 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:51,928 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:51,929 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:51,929 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:51,929 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:52,297 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:52,296 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:52,297 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:52,297 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:52,298 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:52,299 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:52,299 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:52,299 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:52,299 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:52,299 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:52,300 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:52,300 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:52,301 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:52,301 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:52,301 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:52,301 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:52,646 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:52,646 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:52,646 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:52,646 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:52,647 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:52,648 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:52,648 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:52,648 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:52,648 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:52,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:52,649 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:52,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:52,650 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:52,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:52,651 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:52,652 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:53,022 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:53,021 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:53,022 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:53,022 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:53,023 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:53,023 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:53,023 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:53,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:53,023 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:53,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:53,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:53,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:53,026 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:53,026 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:53,028 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:53,029 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:53,349 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:53,350 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:53,351 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:53,351 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:53,352 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:53,352 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:53,353 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:53,353 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:53,354 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:53,354 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:53,354 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:53,355 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:53:53,355 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:53,355 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:53,357 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:53,357 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:53,647 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:53,646 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:53:53,647 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:53:53,647 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:53:53,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:53,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:53:53,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:53:53,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:53:53,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:53:53,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:53,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:53:53,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:53:53,650 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:53:53,650 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:53:53,651 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:53:53,652 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:19,226 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:19,226 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:19,227 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:19,227 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:19,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:19,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:19,232 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:19,232 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:19,232 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:19,233 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:19,235 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:19,236 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:19,236 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:19,237 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:19,238 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:19,241 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:19,996 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:19,998 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:19,997 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:19,999 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:19,999 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:19,998 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:20,001 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:20,001 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:20,001 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:20,002 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:20,002 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:20,002 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:20,003 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:20,003 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:20,003 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:20,005 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:20,449 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:20,449 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:20,450 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:20,450 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:20,452 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:20,454 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:20,454 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:20,453 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:20,455 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:20,455 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:20,453 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:20,456 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:20,457 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:20,457 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:20,457 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:20,458 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:20,840 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:20,841 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:20,841 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:20,841 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:20,843 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:20,843 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:20,844 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:20,844 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:20,844 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:20,845 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:20,846 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:20,848 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:20,849 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:20,851 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:20,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:20,853 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:21,188 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:21,188 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:21,189 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:21,189 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:21,190 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:21,190 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:21,191 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:21,191 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:21,192 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:21,193 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:21,193 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:21,194 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:21,195 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:21,196 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:21,198 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:21,198 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:21,566 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:21,567 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:21,567 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:21,568 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:21,569 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:21,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:21,570 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:21,570 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:21,570 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:21,571 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:21,571 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:21,571 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:21,572 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:21,572 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:21,573 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:21,574 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:21,888 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:21,889 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:21,889 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:21,890 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:21,890 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:21,891 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:21,891 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:21,891 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:21,891 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:21,892 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:21,894 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:21,893 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:21,894 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:21,894 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:21,895 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:21,898 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:22,209 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:22,210 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:22,211 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:22,212 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:22,213 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:22,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:22,213 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:22,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:22,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:22,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:22,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:22,214 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:22,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:22,215 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:22,216 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:22,216 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:22,520 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:22,521 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:22,522 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:22,523 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:22,523 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:22,523 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:22,524 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:22,524 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:22,524 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:22,525 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:22,525 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:22,525 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:22,525 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:22,525 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:22,526 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:22,529 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:22,827 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:22,827 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:22,827 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:22,827 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:22,829 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:22,829 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:22,830 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:22,830 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:22,831 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:22,831 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:22,831 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:22,832 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:22,833 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:22,838 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:22,838 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:22,840 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:23,142 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:23,143 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:23,146 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:23,147 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:23,147 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:23,147 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:23,148 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:23,149 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:23,150 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:23,151 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:23,150 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:23,151 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:23,150 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:23,151 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:23,153 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:23,155 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:23,600 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:23,600 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:23,602 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:23,602 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:23,603 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:23,603 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:23,603 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:23,603 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:23,604 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:23,605 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:23,605 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:23,605 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:23,606 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:23,607 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:23,606 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:23,610 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:23,959 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:23,960 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:23,960 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:23,960 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:23,960 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:23,961 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:23,961 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:23,962 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:23,962 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:23,962 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:23,962 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:23,962 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:23,963 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:23,964 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:23,964 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:23,964 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:24,290 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:24,291 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:24,291 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:24,292 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:24,296 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:24,296 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:24,296 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:24,296 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:24,296 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:24,296 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:24,297 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:24,297 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:24,298 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:24,298 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:24,298 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:24,299 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:24,611 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:24,611 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:24,611 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:24,611 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:24,613 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:24,613 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:24,613 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:24,613 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:24,613 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:24,614 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:24,615 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:24,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:24,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:24,616 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:24,616 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:24,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:24,911 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:24,912 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:24,912 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:24,912 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:24,913 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:24,913 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:24,913 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:24,913 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:24,913 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:24,913 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:24,915 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:24,914 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:24,915 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:24,915 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:24,915 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:24,916 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:25,228 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:25,227 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:25,228 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:25,227 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:25,228 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:25,228 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:25,231 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:25,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:25,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:25,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:25,231 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:25,231 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:25,232 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:25,233 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:25,233 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:25,234 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:25,507 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:25,507 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:25,508 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:25,508 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:25,507 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:25,508 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:25,508 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:25,509 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:25,509 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:25,510 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:25,511 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:25,511 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:25,511 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:25,511 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:25,513 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:25,513 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:25,808 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:25,809 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:25,809 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:25,809 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:25,813 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:25,814 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:25,814 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:25,814 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:25,814 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:25,814 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:25,814 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:25,814 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:25,816 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:25,816 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:25,816 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:25,816 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:26,166 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:26,166 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:26,167 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:26,167 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:26,168 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:26,168 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:26,169 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:26,169 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:26,169 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:26,169 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:26,169 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:26,169 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:26,171 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:26,171 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:26,171 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:26,171 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:26,467 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:26,468 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:26,469 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:26,469 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:26,469 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:26,469 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:26,469 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:26,469 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:26,470 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:26,470 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:26,470 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:26,471 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:26,472 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:26,472 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:26,472 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:26,472 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:26,836 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:26,836 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:26,838 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:26,839 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:26,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:26,840 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:26,840 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:26,841 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:26,841 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:26,843 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:26,843 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:26,844 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:26,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:26,844 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:26,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:26,846 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:27,172 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:27,173 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:27,173 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:27,173 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:27,174 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:27,175 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:27,175 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:27,175 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:27,175 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:27,176 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:27,176 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:27,176 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:27,177 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:27,177 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:27,177 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:27,178 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:27,514 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:27,514 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:27,514 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:27,514 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:27,515 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:27,515 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:27,516 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:27,516 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:27,516 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:27,516 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:27,516 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:27,516 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:27,517 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:27,517 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:27,517 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:27,518 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:27,845 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:27,845 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:27,846 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:27,846 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:27,847 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:27,847 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:27,848 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:27,847 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:27,848 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:27,848 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:27,848 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:27,848 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:27,850 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:27,850 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:27,849 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:27,850 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:28,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:28,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:28,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:28,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:28,187 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:28,187 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:28,187 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:28,188 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:28,188 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:28,188 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:28,189 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:28,189 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:28,189 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:28,190 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:28,190 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:28,192 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:49,767 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:49,768 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:49,768 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:49,769 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:49,772 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:49,772 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:49,773 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:49,773 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:49,775 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:49,775 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:49,778 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:49,778 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:49,780 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:49,780 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:49,781 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:49,783 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:50,422 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:50,422 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:50,423 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:50,423 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:50,424 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:50,425 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:50,425 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:50,425 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:50,424 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:50,426 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:50,426 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:50,426 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:50,427 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:50,427 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:50,428 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:50,427 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:50,937 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:50,937 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:50,938 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:50,938 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:50,938 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:50,938 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:50,939 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:50,939 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:50,939 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:50,940 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:50,940 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:50,941 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:50,941 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:50,941 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:50,942 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:50,943 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:51,287 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:51,288 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:51,290 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:51,291 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:51,291 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:51,292 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:51,292 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:51,293 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:51,293 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:51,293 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:51,294 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:51,294 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:51,294 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:51,294 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:51,294 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:51,295 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:51,644 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:51,643 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:51,644 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:51,644 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:51,644 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:51,645 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:51,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:51,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:51,646 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:51,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:51,647 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:51,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:51,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:51,649 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:51,650 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:51,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:52,074 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:52,075 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:52,075 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:52,077 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:52,075 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:52,085 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:52,085 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:52,086 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:52,086 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:52,086 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:52,087 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:52,088 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:52,088 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:55:52,088 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:52,089 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:52,093 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:52,395 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:55:52,396 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:55:52,396 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:55:52,396 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:52,398 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:52,398 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:55:52,399 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:55:52,399 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:52,400 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:55:52,400 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:55:52,399 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:55:52,401 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:55:52,401 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:55:52,403 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:55:52,403 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:55:52,404 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:40,020 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:40,021 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:40,021 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:40,021 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:40,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:40,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:40,024 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:40,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:40,024 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:40,026 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:40,026 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:56:40,027 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:40,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:40,027 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:40,029 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:40,029 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:40,663 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:40,663 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:40,663 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:40,664 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:40,664 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:40,664 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:40,664 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:40,664 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:40,666 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:56:40,666 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:40,666 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:40,666 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:40,666 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:40,667 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:40,668 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:40,668 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:41,109 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:41,110 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:41,110 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:41,111 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:41,111 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:41,112 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:41,112 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:41,112 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:41,112 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:41,112 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:41,113 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:41,113 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:41,114 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:41,114 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:41,114 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:41,115 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:56:41,477 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:41,479 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:41,478 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:41,480 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:41,481 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:41,481 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:41,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:41,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:41,482 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:41,483 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:41,484 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:41,484 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:41,484 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:41,502 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:41,502 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:41,503 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:56:41,789 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:41,790 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:41,790 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:41,791 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:41,793 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:41,795 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:41,794 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:41,795 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:41,795 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:41,795 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:41,796 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:41,796 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:41,796 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:41,797 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:41,797 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:41,799 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:56:58,041 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:58,041 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:58,042 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:58,042 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:58,044 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:58,045 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:58,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:58,045 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:58,046 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:58,046 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:58,046 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:58,047 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:58,047 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:58,048 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:58,049 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:58,049 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:56:58,799 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:58,799 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:58,799 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:58,800 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:58,801 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:58,801 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:58,801 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:58,802 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:58,803 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:58,803 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:58,803 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:58,804 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:58,804 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:58,804 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:58,805 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:58,805 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:56:59,293 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:59,294 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:59,297 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:59,297 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:59,298 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:59,298 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:59,298 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:59,298 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:59,299 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:59,300 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:59,300 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:59,301 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:59,301 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:59,301 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:59,301 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:59,303 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:56:59,898 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:56:59,898 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:56:59,898 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:59,898 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:56:59,900 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:59,900 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:56:59,900 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:56:59,901 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:56:59,901 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:59,902 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:56:59,902 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:56:59,902 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:56:59,902 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:56:59,902 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:56:59,903 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:56:59,904 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:00,551 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:00,551 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:00,552 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:00,552 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:00,554 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:00,554 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:00,554 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:00,554 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:00,554 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:00,554 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:00,554 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:00,555 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:00,557 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:00,557 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:00,557 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:00,558 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:01,317 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:01,318 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:01,318 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:01,318 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:01,319 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:01,319 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:01,320 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:01,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:01,321 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:01,322 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:01,324 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:01,324 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:01,325 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:01,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:01,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:01,331 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:10,556 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:10,557 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:10,557 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:10,558 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:10,558 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:10,558 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:10,559 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:10,560 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:10,560 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:10,560 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:10,560 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:10,560 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:10,560 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:10,562 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:10,563 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:10,566 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:11,659 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:11,659 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:11,660 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:11,660 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:11,661 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:11,661 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:11,661 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:11,662 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:11,662 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:11,662 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:11,664 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:11,664 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:11,666 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:11,667 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:11,668 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:11,669 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:12,383 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:12,383 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:12,383 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:12,383 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:12,384 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:12,384 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:12,385 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:12,385 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:12,384 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:12,385 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:12,386 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:12,387 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:12,387 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:12,387 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:12,388 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:12,389 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:20,272 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:20,273 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:20,278 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:20,279 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:20,279 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:20,280 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:20,281 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:20,281 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:20,281 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:20,283 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:20,284 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:20,285 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:20,287 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:20,287 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:20,287 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:20,289 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:20,966 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:20,967 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:20,967 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:20,967 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:20,968 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:20,968 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:20,969 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:20,969 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:20,969 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:20,969 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:20,970 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:20,970 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:20,970 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:20,970 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:20,970 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:20,973 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:21,520 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:21,521 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:21,521 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:21,522 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:21,522 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:21,523 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:21,524 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:21,524 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:21,526 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:21,526 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:21,527 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:21,528 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:21,528 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:21,528 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:21,529 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:21,530 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:22,069 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:22,070 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:22,071 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:22,072 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:22,072 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:22,073 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:22,075 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:22,076 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:22,076 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:22,076 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:57:22,076 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:22,077 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:22,077 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:22,077 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:22,078 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:22,078 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:22,556 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:57:22,557 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:57:22,557 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:57:22,557 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:22,557 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:22,558 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:57:22,558 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:57:22,559 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:57:22,559 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:22,559 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:57:22,559 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:57:22,560 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:57:22,560 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:57:22,560 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:57:22,561 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:57:22,562 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:58:38,740 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:58:38,743 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:58:38,744 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:58:38,745 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:58:38,745 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:58:38,745 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:58:38,746 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:58:38,747 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:58:38,747 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:58:38,747 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:58:38,748 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:58:38,748 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:58:38,749 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:58:38,750 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:58:38,750 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:58:38,752 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:58:39,478 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:58:39,479 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:58:39,480 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:58:39,480 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:58:39,481 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:58:39,481 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:58:39,481 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:58:39,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:58:39,482 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:58:39,482 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:58:39,483 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:58:39,483 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:58:39,483 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:58:39,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:58:39,485 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:58:39,486 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:58:40,008 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:58:40,009 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:58:40,010 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:58:40,011 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:58:40,011 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:58:40,012 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:58:40,012 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:58:40,012 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:58:40,012 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 15:58:40,014 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:58:40,027 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:58:40,027 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:58:40,028 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:58:40,028 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:58:40,030 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:58:40,030 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:58:40,558 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 15:58:40,559 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:58:40,561 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:58:40,561 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 15:58:40,561 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 15:58:40,562 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:58:40,562 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 15:58:40,563 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 15:58:40,564 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 15:58:40,564 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 15:58:40,565 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 15:58:40,567 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 15:58:40,567 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 15:58:40,567 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 15:58:40,569 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 15:58:40,570 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:27,284 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:27,285 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:27,285 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:27,285 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:27,286 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:27,287 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:27,287 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:27,287 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:27,288 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:27,289 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:27,289 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:27,289 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:27,291 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:27,293 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:27,294 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:27,298 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:29,735 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:29,736 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:29,737 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:29,738 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:29,739 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:29,741 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:29,742 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:29,742 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:29,742 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:29,742 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:29,743 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:29,743 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:29,744 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:29,744 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:29,745 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:29,746 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:30,322 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:30,322 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:30,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:30,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:30,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:30,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:30,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:30,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:30,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:30,328 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:30,328 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:30,328 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:30,329 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:30,332 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:30,333 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:30,335 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:30,919 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:30,919 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:30,920 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:30,920 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:30,920 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:30,920 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:30,921 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:30,922 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:30,921 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:30,922 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:30,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:30,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:30,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:30,924 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:30,924 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:30,925 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:31,483 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:31,483 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:31,483 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:31,484 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:31,485 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:31,485 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:31,485 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:31,486 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:31,486 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:31,486 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:31,486 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:31,487 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:31,487 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:31,488 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:31,488 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:31,487 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:32,007 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:32,007 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:32,008 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:32,009 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:32,009 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:32,009 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:32,010 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:32,011 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:32,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:32,011 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:32,011 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:32,011 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:32,011 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:32,011 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:32,013 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:32,013 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:33,160 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:33,160 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:33,161 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:33,162 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:33,162 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:33,162 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:33,163 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:33,164 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:33,164 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:33,164 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:33,164 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:33,164 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:33,164 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:33,164 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:33,166 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:33,166 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:41,787 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:41,789 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:41,789 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:41,789 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:41,789 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:41,789 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:41,791 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:41,791 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:41,791 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:41,791 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:41,791 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:41,792 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:41,793 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:41,794 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:41,796 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:41,797 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:42,470 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:42,471 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:42,471 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:42,472 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:42,472 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:42,473 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:42,473 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:42,473 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:42,473 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:42,474 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:42,474 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:42,475 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:42,475 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:42,475 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:42,475 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:42,477 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:43,015 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:43,015 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:43,017 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:43,017 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:43,020 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:43,020 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:43,020 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:43,020 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:43,020 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:43,020 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:43,020 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:43,021 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:43,022 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:43,022 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:00:43,022 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:43,023 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:43,474 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:00:43,474 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:00:43,475 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:00:43,476 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:43,476 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:43,477 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:00:43,477 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:43,477 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:00:43,477 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:00:43,477 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:00:43,477 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:00:43,479 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:00:43,480 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:00:43,480 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:00:43,480 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:00:43,483 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:02:24,683 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:02:24,683 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:02:24,684 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:24,684 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:02:24,686 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:24,687 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:02:24,687 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:24,688 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:02:24,689 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:02:24,691 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:24,692 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:02:24,694 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:24,696 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:02:24,696 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:24,699 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:02:24,700 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:02:25,388 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:02:25,388 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:02:25,388 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:25,388 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:02:25,390 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:25,390 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:02:25,390 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:25,390 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:02:25,391 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:02:25,392 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:25,391 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:25,394 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:02:25,393 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:25,396 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:02:25,396 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:02:25,396 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:02:28,670 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:02:28,671 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:02:28,672 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:02:28,673 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:28,676 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:28,676 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:02:28,676 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:28,676 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:02:28,676 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:02:28,676 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:28,677 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:28,678 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:02:28,678 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:28,678 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:02:28,678 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:02:28,680 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:02:43,605 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:02:43,606 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:02:43,607 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:02:43,607 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:43,608 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:43,608 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:43,609 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:02:43,609 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:02:43,610 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:43,610 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:02:43,614 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:02:43,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:43,615 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:02:43,615 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:43,615 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:02:43,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:02:45,700 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:02:45,701 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:02:45,701 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:02:45,701 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:45,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:02:45,702 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:02:45,703 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:02:45,703 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:02:45,704 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:45,704 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:02:45,704 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:02:45,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:02:45,705 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:02:45,707 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:02:45,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:02:45,711 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:03:12,545 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:03:12,545 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:03:12,546 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:03:12,546 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:03:12,546 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:03:12,547 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:03:12,547 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:03:12,548 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:03:12,548 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:03:12,549 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:03:12,548 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:03:12,549 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:03:12,550 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:03:12,550 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:03:12,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:03:12,552 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:03:15,174 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:03:15,175 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:03:15,174 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:03:15,177 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:03:15,177 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:03:15,178 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:03:15,178 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:03:15,180 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:03:15,180 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:03:15,181 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:03:15,181 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:03:15,182 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:03:15,182 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:03:15,183 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:03:15,187 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:03:15,188 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:03:17,465 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:03:17,466 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:03:17,467 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:03:17,467 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:03:17,468 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:03:17,468 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:03:17,469 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:03:17,470 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:03:17,470 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:03:17,471 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:03:17,472 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:03:17,472 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:03:17,472 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:03:17,472 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:03:17,474 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:03:17,474 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:06:57,874 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:06:57,875 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:06:57,877 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:06:57,880 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:06:57,881 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:06:57,881 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:06:57,881 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:06:57,882 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:06:57,882 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:06:57,883 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:06:57,884 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:06:57,885 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:06:57,884 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:06:57,886 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:06:57,887 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:06:57,889 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:07:00,766 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:07:00,767 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:00,768 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:00,768 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:07:00,768 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:07:00,768 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:07:00,768 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:07:00,768 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:00,769 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:07:00,770 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:00,770 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:07:00,770 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:00,771 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:07:00,771 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:00,773 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:07:00,774 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:07:01,459 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:07:01,460 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:07:01,460 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:07:01,460 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:01,462 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:01,462 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:01,462 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:01,462 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:07:01,462 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:07:01,462 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:07:01,462 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:07:01,463 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:01,464 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:07:01,465 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:01,464 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:07:01,465 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:07:01,970 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:07:01,970 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:07:01,970 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:07:01,971 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:01,971 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:01,972 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:07:01,972 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:01,973 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:01,973 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:07:01,974 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:07:01,974 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:07:01,974 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:01,974 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:07:01,974 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:07:01,976 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:07:01,976 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:02,316 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:07:02,317 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:07:02,319 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:02,319 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:07:02,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:02,320 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:07:02,321 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:02,322 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:07:02,322 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:02,322 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:07:02,322 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:07:02,322 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:07:02,323 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:02,323 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:02,324 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:07:02,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:07:02,652 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:07:02,653 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:07:02,654 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:07:02,655 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:02,655 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:07:02,655 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:02,655 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:07:02,655 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:02,656 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:07:02,657 DEBUG (ProductController.java:34)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:07:02,657 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:07:02,657 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:07:02,658 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:07:02,659 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:07:02,660 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:07:02,662 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:14:18,188 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 7320 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 16:14:18,189 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 16:14:18,189 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 16:14:19,175 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 1.044 seconds (JVM running for 3592.883)
2019-07-25 16:18:15,289 ERROR (BaseController.java:295)- 系统异常:Name for argument type [int] not available, and parameter name information not found in class file either.
java.lang.IllegalArgumentException: Name for argument type [int] not available, and parameter name information not found in class file either.
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.updateNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:172)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.getNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:149)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:98)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 16:18:15,289 ERROR (BaseController.java:295)- 系统异常:Name for argument type [int] not available, and parameter name information not found in class file either.
java.lang.IllegalArgumentException: Name for argument type [int] not available, and parameter name information not found in class file either.
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.updateNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:172)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.getNamedValueInfo(AbstractNamedValueMethodArgumentResolver.java:149)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:98)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2019-07-25 16:18:15,326 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:15,326 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:15,328 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:16,941 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 7320 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 16:18:16,941 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 16:18:16,942 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 16:18:17,754 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 0.852 seconds (JVM running for 3831.461)
2019-07-25 16:18:19,111 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:19,114 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:19,117 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:19,119 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:19,120 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:19,128 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:19,129 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:19,130 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:19,130 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:19,136 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:19,138 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:19,141 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:19,145 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:21,690 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:18:21,691 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:21,693 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:18:21,694 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }
}
2019-07-25 16:18:23,448 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:23,448 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:23,452 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:23,452 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:23,457 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:23,457 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:23,459 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:23,460 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:23,460 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:23,460 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:23,463 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:23,457 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:23,470 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:32,474 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:32,474 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:32,478 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:32,478 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:32,479 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:32,479 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:32,479 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:32,479 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:32,483 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:32,483 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:32,483 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:32,483 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:32,485 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:32,809 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:32,810 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:32,810 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:32,810 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:32,812 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:32,812 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:32,813 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:32,813 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:32,813 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:32,813 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:32,813 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:32,816 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:32,816 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:33,103 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:33,104 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:33,104 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:33,105 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:33,106 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:33,106 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:33,107 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:33,107 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:33,108 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:33,112 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:33,113 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:33,113 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:33,116 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:33,387 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:33,388 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:33,390 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:33,391 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:33,392 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:33,392 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:33,392 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:33,393 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:33,393 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:33,393 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:33,396 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:33,396 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:33,396 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:33,733 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:33,734 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:33,736 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:33,737 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:33,737 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:33,737 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:33,737 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:33,737 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:33,737 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:33,737 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:33,741 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:33,741 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:33,741 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:34,045 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:34,045 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:34,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:34,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:34,047 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:34,048 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:34,048 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:34,048 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:34,048 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:34,048 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:34,048 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:34,051 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:34,054 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:34,399 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:34,399 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:34,399 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:34,399 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:34,401 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:34,401 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:34,402 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:34,403 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:34,403 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:34,404 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:34,404 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:34,405 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:34,405 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:34,682 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:34,682 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:34,682 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:34,683 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:34,685 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:34,685 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:34,686 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:34,686 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:34,687 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:34,687 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:34,687 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:34,689 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:34,689 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:34,984 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:34,984 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:34,984 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:34,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:34,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:34,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:34,987 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:34,987 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:34,987 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:34,987 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:34,988 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:34,988 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:34,991 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:35,327 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:35,327 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:35,327 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:35,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:35,331 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:35,331 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:35,331 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:35,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:35,331 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:35,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:35,331 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:35,334 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:35,334 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:35,600 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:35,600 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:35,601 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:35,601 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:35,602 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:35,602 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:35,603 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:35,604 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:35,604 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:35,605 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:35,605 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:35,607 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:18:35,607 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:39,495 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:18:39,496 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 3(Integer)
2019-07-25 16:18:39,498 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:18:39,498 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }
}
2019-07-25 16:18:41,031 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:18:41,031 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:18:41,031 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:41,031 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:18:41,034 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:41,034 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:18:41,035 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:18:41,035 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:18:41,035 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:18:41,035 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:18:41,035 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:18:41,037 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:18:41,037 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:19:57,452 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:19:57,452 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:19:57,452 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:19:57,453 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:19:57,453 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:19:57,453 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:19:57,455 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:19:57,455 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:19:57,456 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:19:57,456 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:19:57,456 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:19:57,456 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:19:57,459 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:21:12,926 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:21:12,927 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:21:12,930 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:21:12,930 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:21:12,931 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:21:12,931 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:21:12,931 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:21:12,931 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:21:12,931 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:21:12,931 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:21:12,934 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:21:12,934 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:21:12,934 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:21:13,246 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:21:13,246 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:21:13,247 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:21:13,247 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:21:13,249 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:21:13,250 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:21:13,250 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:21:13,250 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:21:13,252 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:21:13,252 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:21:13,253 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:21:13,253 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:21:13,254 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:22:14,618 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:22:14,618 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:22:14,623 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:22:14,625 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:22:14,625 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:22:14,627 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:22:14,630 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:22:19,290 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:22:19,290 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:22:19,292 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 16:22:19,292 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:22:19,293 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:22:19,295 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:22:19,295 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 12,
      "userName" : "luojun",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:22:20,195 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:22:20,196 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:22:20,197 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:22:20,198 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:22:20,198 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:22:20,200 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:22:20,200 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:22:21,051 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:22:21,051 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:22:21,053 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:22:21,053 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:22:21,054 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:22:21,055 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:22:21,055 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:22:22,655 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:22:22,655 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:22:22,657 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:22:22,658 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:22:22,658 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:22:22,659 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:22:22,660 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:22:24,701 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:22:24,702 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:22:24,704 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:22:24,704 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:22:24,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:22:24,708 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:22:24,708 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:22:25,425 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:22:25,426 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:22:25,427 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 16:22:25,428 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:22:25,428 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:22:25,430 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:22:25,430 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "userId" : 12,
      "userName" : "luojun",
      "password" : "123",
      "status" : 1
    }, {
      "userId" : 11,
      "userName" : "11",
      "password" : "111",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:22:30,703 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 16:22:30,704 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 11(String)
2019-07-25 16:22:30,705 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:22:30,706 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 11,
    "userName" : "11",
    "password" : "111",
    "status" : 1
  }
}
2019-07-25 16:23:25,365 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 16:23:25,366 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 罗军(String)
2019-07-25 16:23:25,368 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 16:23:29,714 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 16:23:29,715 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 16:23:29,716 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:23:29,716 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 16:23:29,716 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 16:23:29,718 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:23:29,718 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 16:23:29,718 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 16:23:29,719 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:23:37,246 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:23:37,247 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:23:37,250 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:23:37,251 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:23:37,252 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:23:37,255 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:23:37,256 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:23:39,150 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:23:39,151 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:23:39,153 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:23:39,153 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:23:39,154 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:23:39,155 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:23:39,156 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:23:40,823 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 16:23:40,823 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:23:40,829 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:23:40,831 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 16:23:43,437 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:23:43,437 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:23:43,439 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:23:43,440 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:23:43,440 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:23:43,443 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:23:43,444 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:23:45,313 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:23:45,314 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:23:45,315 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:23:45,316 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:23:45,316 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:23:45,318 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:23:45,319 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:24:25,795 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:24:25,796 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:24:25,798 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:24:25,798 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:24:25,798 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:24:25,800 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:24:25,801 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:24:26,904 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:24:26,905 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:24:26,907 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:24:26,907 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:24:26,908 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:24:26,910 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:24:26,911 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:24:30,586 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:24:30,586 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:24:30,589 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:24:30,589 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:24:30,590 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:24:30,593 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:24:30,594 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:24:42,730 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:24:42,731 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:24:42,732 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:24:42,733 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:24:42,733 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:24:42,735 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:24:42,736 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:25:38,542 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:25:38,543 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:25:38,544 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:25:38,545 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:25:38,545 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:25:38,546 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:25:38,548 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:25:40,835 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:25:40,835 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:25:40,837 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:25:40,838 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:25:40,838 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:25:40,841 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:25:40,843 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:26:00,391 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:26:00,392 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:26:00,394 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:26:00,395 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:26:00,396 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:26:00,400 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:26:00,400 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:26:53,679 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:26:53,679 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:26:53,682 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:26:53,683 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:26:53,683 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:26:53,688 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:26:53,688 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:26:55,247 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 16:26:55,247 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:26:55,249 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:26:55,250 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 16:26:57,275 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:26:57,276 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:26:57,277 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:26:57,278 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:26:57,278 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:26:57,278 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:26:57,279 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:27:00,187 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:27:00,187 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:27:00,191 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:27:00,192 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:27:00,192 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:27:00,195 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:27:00,196 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:27:02,642 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:27:02,642 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:27:02,643 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:27:02,644 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:27:02,644 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:27:02,645 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:27:02,646 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:27:03,841 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:27:03,841 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 16:27:03,843 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:27:03,844 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 16:27:28,580 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:27:28,581 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:27:28,583 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:27:28,584 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:27:28,584 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:27:28,586 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:27:28,587 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:27:29,463 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:27:29,464 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:27:29,466 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:27:29,467 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:27:29,467 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:27:29,470 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:27:29,471 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:27:30,282 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:27:30,282 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:27:30,285 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:27:30,286 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }
}
2019-07-25 16:27:48,900 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:27:48,901 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:27:48,902 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:27:48,903 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:27:48,903 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:27:48,905 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:27:48,906 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:27:50,573 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:27:50,574 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 16:27:50,576 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:27:50,576 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 16:28:10,739 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:28:10,740 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:28:10,742 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:28:10,743 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:28:10,744 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:28:10,747 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:28:10,747 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:28:12,227 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:28:12,228 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 16:28:12,230 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:28:12,230 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 16:28:49,839 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:28:49,840 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:28:49,842 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:28:49,843 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:28:49,844 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:28:49,846 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:28:49,847 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:28:51,285 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:28:51,286 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 16:28:51,289 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:28:51,290 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 16:29:00,642 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:29:00,643 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:29:00,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:29:00,647 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:29:00,647 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:29:00,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:29:00,651 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:29:05,417 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:29:05,418 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:29:05,420 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:29:05,421 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:29:05,421 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:29:05,423 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:29:05,424 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:29:13,209 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:29:13,209 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:29:13,210 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:29:13,211 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:29:13,212 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:29:13,212 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:29:13,213 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:29:15,359 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 16:29:15,360 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 16:29:15,362 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:29:15,363 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 8,
    "userName" : "luo",
    "password" : "123",
    "status" : 1
  }
}
2019-07-25 16:30:06,919 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 16:30:06,920 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:30:06,922 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:30:06,923 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 16:30:06,924 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:30:06,926 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:30:06,928 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 1
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 8,
      "userName" : "luo",
      "password" : "123",
      "status" : 1
    } ],
    "pageCount" : 2,
    "dataCount" : 6
  }
}
2019-07-25 16:30:17,591 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 16:30:17,592 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 16:30:17,594 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:30:17,595 DEBUG (UsersController.java:58)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "userId" : 8,
    "userName" : "luo",
    "password" : "123",
    "status" : 1
  }
}
2019-07-25 16:30:20,141 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:30:20,141 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:30:20,144 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:30:20,145 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:30:20,147 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:30:20,147 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:30:20,146 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:30:20,148 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:30:20,149 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:30:20,149 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:30:20,150 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:30:20,154 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:30:20,155 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:30:31,379 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:30:31,379 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:30:31,381 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:30:31,382 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:30:31,383 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:30:31,385 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:30:31,386 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:30:33,646 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:30:33,646 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:30:33,648 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:30:33,648 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }
}
2019-07-25 16:30:35,289 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:30:35,289 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:30:35,290 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:30:35,291 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:30:35,291 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:30:35,292 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:30:35,293 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:31:03,546 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product WHERE productId=? 
2019-07-25 16:31:03,547 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 16:31:03,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:31:03,551 DEBUG (ProductController.java:67)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }
}
2019-07-25 16:31:20,082 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:31:20,083 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:31:20,084 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:31:20,085 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:31:20,085 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:31:20,085 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:31:20,087 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:31:20,088 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:31:20,088 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:31:20,088 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:31:20,088 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:31:20,090 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:31:20,090 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:31:21,416 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:31:21,416 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:31:21,419 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:31:21,419 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:31:21,420 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:31:21,423 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:31:21,425 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:32:02,283 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:32:02,283 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:32:02,291 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:32:02,292 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:32:02,292 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:32:02,296 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:32:02,297 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:32:03,210 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:32:03,211 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:32:03,215 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:32:03,216 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:32:03,217 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:32:03,219 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:32:03,220 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:32:17,130 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:32:17,131 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:32:17,138 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:32:17,139 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:32:17,140 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:32:17,143 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:32:17,144 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:33:13,835 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:33:13,836 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:33:13,837 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:33:13,838 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:33:13,838 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:33:13,840 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:33:13,840 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:33:37,547 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:33:37,547 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:33:37,549 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:33:37,550 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:33:37,550 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:33:37,552 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:33:37,553 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:18,090 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:18,090 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:18,096 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:18,097 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:18,097 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:18,100 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:18,101 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:18,854 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:18,855 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:18,857 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:18,858 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:18,859 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:18,862 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:18,863 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:21,466 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:21,466 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:21,469 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:21,469 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:21,470 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:21,474 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:21,476 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:22,443 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:22,443 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:22,445 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:22,446 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:22,446 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:22,448 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:22,449 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:22,987 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:22,987 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:22,990 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:22,991 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:22,991 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:22,993 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:22,994 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:23,533 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:23,533 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:23,534 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:23,535 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:23,535 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:23,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:23,539 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:24,764 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:24,764 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:24,766 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:24,766 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:24,767 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:24,769 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:24,770 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:25,405 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:25,406 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:25,408 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:25,408 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:25,409 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:25,411 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:25,412 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:26,021 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:26,022 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:26,024 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:26,025 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:26,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:26,027 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:26,028 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:26,612 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:26,613 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:26,615 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:26,615 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:26,615 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:26,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:26,618 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:27,139 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:27,139 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:27,140 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:27,140 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:27,141 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:27,142 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:27,142 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:28,355 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:28,356 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:28,358 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:28,359 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:28,360 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:28,362 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:28,362 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:33,972 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:33,972 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:33,974 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:33,974 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:33,974 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:33,975 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:33,975 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:34,217 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:34,218 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:34,220 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:34,220 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:34,220 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:34,222 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:34,223 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:38,478 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:38,478 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:38,480 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:38,480 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:38,481 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:38,482 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:38,483 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:38,766 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:38,767 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:38,768 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:38,768 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:38,769 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:38,770 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:38,770 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:39,020 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:39,020 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:39,022 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:39,023 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:39,026 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:39,028 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:39,028 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:50,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:50,618 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:50,619 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:50,620 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:50,620 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:50,621 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:50,622 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:50,894 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:50,894 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:50,897 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:50,898 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:50,900 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:50,902 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:50,903 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:51,184 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:51,184 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:51,185 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:51,186 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:51,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:51,186 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:51,187 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:34:51,457 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:34:51,457 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:34:51,459 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:34:51,459 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:34:51,459 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:34:51,461 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:34:51,462 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:04,036 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:04,037 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:35:04,038 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:04,038 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:04,039 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:04,040 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:04,040 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:06,981 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:06,982 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:06,984 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:06,985 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:06,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:06,986 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:06,986 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:08,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:08,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:35:08,216 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:08,216 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:08,217 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:08,217 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:08,218 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:08,930 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:08,930 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:08,932 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:08,932 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:08,933 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:08,934 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:08,934 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:09,772 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:09,772 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:35:09,774 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:09,775 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:09,775 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:09,777 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:09,778 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:10,322 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:10,323 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:10,325 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:10,325 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:10,325 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:10,326 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:10,327 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:10,688 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:10,688 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:35:10,690 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:10,690 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:10,690 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:10,692 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:10,692 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:11,044 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:11,044 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:11,046 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:11,047 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:11,047 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:11,048 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:11,049 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:11,578 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:11,578 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:35:11,580 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:11,580 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:11,581 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:11,583 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:11,584 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:12,042 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:12,043 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:12,046 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:12,046 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:12,047 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:12,049 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:12,049 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:12,456 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:12,457 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:35:12,458 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:12,459 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:12,459 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:12,461 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:12,462 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:12,841 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:12,841 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:12,843 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:12,843 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:12,844 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:12,844 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:12,845 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:14,101 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:14,102 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:35:14,104 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:14,105 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:14,105 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:14,107 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:14,107 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:14,449 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:14,449 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:14,451 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:14,451 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:14,451 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:14,452 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:14,452 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:33,174 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:33,175 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:33,179 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:33,180 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:33,182 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:33,184 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:33,185 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:33,800 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:33,800 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:33,802 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:33,802 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:33,802 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:33,804 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:33,805 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:34,295 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:34,295 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:34,297 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:34,297 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:34,298 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:34,299 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:34,300 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:34,788 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:34,789 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:34,792 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:34,793 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:34,794 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:34,797 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:34,797 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:35,083 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:35,084 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:35,085 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:35,086 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:35,086 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:35,088 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:35,088 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:35,432 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:35,434 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:35,436 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:35,437 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:35,438 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:35,443 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:35,445 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:35,734 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:35,735 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:35,737 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:35,738 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:35,738 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:35,745 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:35,746 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:36,049 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:36,050 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:36,053 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:36,054 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:36,054 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:36,059 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:36,061 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:36,374 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:36,377 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:36,379 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:36,379 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:36,380 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:36,381 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:36,382 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:36,694 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:36,695 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:36,697 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:36,698 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:36,698 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:36,700 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:36,701 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:37,018 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:37,019 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:37,021 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:37,021 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:37,022 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:37,026 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:37,027 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:37,353 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:37,354 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:37,357 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:37,359 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:37,360 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:37,362 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:37,363 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:37,586 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:37,587 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:37,592 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:37,593 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:37,595 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:37,597 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:37,597 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:37,847 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:37,847 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:37,849 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:37,849 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:37,850 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:37,851 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:37,851 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:38,173 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:38,175 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:38,177 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:38,178 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:38,178 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:38,180 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:38,181 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:38,461 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:38,462 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:38,464 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:38,465 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:38,465 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:38,467 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:38,468 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:38,743 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:38,743 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:38,745 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:38,745 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:38,746 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:38,747 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:38,748 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:39,042 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:39,043 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:39,045 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:39,046 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:39,046 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:39,049 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:39,049 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:39,329 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:39,329 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:39,330 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:39,331 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:39,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:39,332 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:39,333 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:39,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:39,618 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:39,619 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:39,621 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:39,622 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:39,625 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:39,626 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:39,905 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:39,906 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:39,908 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:39,908 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:39,909 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:39,910 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:39,911 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:35:40,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:35:40,234 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:35:40,240 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:35:40,241 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:35:40,242 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:35:40,244 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:35:40,245 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:09,025 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:09,026 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:09,028 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:09,029 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:09,030 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:09,033 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:09,034 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:09,576 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:09,577 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:09,582 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:09,583 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:09,584 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:09,587 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:09,587 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:10,084 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:10,085 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:10,086 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:10,087 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:10,087 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:10,088 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:10,088 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:10,373 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:10,373 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:10,375 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:10,375 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:10,376 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:10,379 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:10,381 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:10,670 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:10,670 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:10,672 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:10,673 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:10,673 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:10,674 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:10,675 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:10,990 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:10,990 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:10,991 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:10,992 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:10,993 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:10,996 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:10,997 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:11,340 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:11,340 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:11,346 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:11,347 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:11,347 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:11,350 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:11,351 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:11,648 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:11,649 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:11,653 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:11,654 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:11,654 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:11,657 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:11,657 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:11,949 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:11,950 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:11,951 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:11,951 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:11,952 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:11,953 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:11,953 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:23,597 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:23,598 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:23,604 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:23,604 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:23,605 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:23,607 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:23,608 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:23,999 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:24,001 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:24,003 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:24,004 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:24,004 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:24,006 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:24,006 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:24,319 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:24,320 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:24,322 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:24,323 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:24,324 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:24,327 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:24,328 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:24,579 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:24,580 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:24,586 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:24,586 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:24,587 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:24,589 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:24,590 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:24,834 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:24,834 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:24,837 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:24,837 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:24,837 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:24,839 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:24,840 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:36:25,106 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:36:25,106 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:36:25,108 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:36:25,109 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:36:25,109 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:36:25,111 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:36:25,112 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:37:10,844 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 16:37:10,844 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:37:10,848 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:37:10,850 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 16:37:25,815 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:37:25,816 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:37:25,818 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:37:25,818 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:37:25,819 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:37:25,821 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:37:25,822 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:37:29,697 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:37:29,697 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:37:29,699 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:37:29,700 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:37:29,700 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:37:29,702 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:37:29,703 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:37:31,597 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:37:31,598 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:37:31,600 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:37:31,601 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:37:31,602 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:37:31,604 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:37:31,605 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:45:18,994 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:45:18,995 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:45:18,997 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:45:18,999 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:45:19,000 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:45:19,002 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:45:19,003 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:46:26,280 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 16:46:26,281 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:46:26,284 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:46:26,284 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 16:48:03,841 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:48:03,842 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:48:03,846 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:48:03,847 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:48:03,846 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:48:03,847 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:48:03,850 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:48:03,850 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:48:03,851 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:48:03,851 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:48:03,852 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:48:03,855 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:48:03,855 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:48:05,951 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:48:05,952 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:48:05,955 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:48:05,956 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:48:05,956 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:48:05,958 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:48:05,959 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:48:40,503 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:48:40,504 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:48:40,509 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:48:40,511 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:48:40,512 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:48:40,514 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:48:40,514 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:48:41,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:48:41,213 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:48:41,215 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:48:41,216 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:48:41,216 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:48:41,218 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:48:41,218 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:48:41,800 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:48:41,801 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:48:41,803 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:48:41,803 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:48:41,803 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:48:41,804 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:48:41,806 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:05,799 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:05,801 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:05,803 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:05,803 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:05,804 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:05,805 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:05,806 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:06,431 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:06,431 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:06,435 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:06,435 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:06,436 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:06,437 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:06,438 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:06,813 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:06,814 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:06,818 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:06,819 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:06,819 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:06,822 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:06,823 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:07,137 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:07,138 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:07,140 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:07,140 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:07,141 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:07,143 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:07,144 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:07,416 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:07,417 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:07,419 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:07,419 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:07,420 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:07,421 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:07,422 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:16,938 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:16,938 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:16,943 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:16,944 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:16,945 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:16,946 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:16,947 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:33,549 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:33,550 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:33,552 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:33,553 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:33,553 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:33,555 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:33,556 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:34,229 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:34,230 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:34,231 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:34,231 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:34,232 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:34,233 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:34,233 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:44,280 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:44,280 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:44,284 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:44,285 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:44,291 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:44,293 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:44,293 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:50:44,966 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:50:44,967 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:50:44,970 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:50:44,971 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:50:44,972 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:50:44,973 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:50:44,974 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:51:04,799 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:51:04,801 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:51:04,802 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:51:04,803 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:51:04,803 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:51:04,805 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:51:04,805 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:51:12,624 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:51:12,626 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:51:12,630 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:51:12,631 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:51:12,631 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:51:12,634 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:51:12,635 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:52:59,842 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:52:59,843 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:52:59,845 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:52:59,845 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:52:59,846 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:52:59,849 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:52:59,850 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:30,073 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:30,073 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:30,075 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:30,075 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:30,076 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:30,077 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:30,078 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:31,119 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:31,120 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:31,121 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:31,122 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:31,122 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:31,124 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:31,124 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:32,069 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:32,069 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:32,071 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:32,072 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:32,072 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:32,073 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:32,074 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:33,149 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:33,150 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:33,151 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:33,152 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:33,153 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:33,154 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:33,154 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:34,052 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:34,052 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:34,053 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:34,053 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:34,053 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:34,054 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:34,055 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:35,037 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:35,037 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:35,039 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:35,039 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:35,040 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:35,041 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:35,042 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:35,795 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:35,795 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:35,796 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:35,796 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:35,796 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:35,797 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:35,798 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:36,476 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:36,477 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:36,478 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:36,479 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:36,480 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:36,481 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:36,481 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:37,547 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:37,548 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:37,549 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:37,549 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:37,550 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:37,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:37,551 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:39,133 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:39,133 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:39,134 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:39,135 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:39,135 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:39,136 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:39,136 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:39,866 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:39,867 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:39,869 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:39,869 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:39,869 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:39,871 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:39,871 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:52,240 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:52,241 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:52,243 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:52,244 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:52,244 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:52,245 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:52,246 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:53,689 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:53,689 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:53,691 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:53,692 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:53,692 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:53,694 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:53,694 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:54,548 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:54,548 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:54,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:54,550 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:54,551 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:54,552 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:54,552 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:55,293 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:55,294 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:55,296 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:55,297 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:55,297 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:55,299 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:55,300 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:56,397 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:56,397 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:56,399 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:56,399 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:56,400 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:56,401 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:56,401 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:57,211 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:57,211 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:57,213 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:57,213 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:57,214 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:57,215 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:57,215 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:58,077 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:58,078 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:58,079 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:58,080 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:58,080 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:58,081 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:58,082 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:58,730 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:58,731 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:54:58,732 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:54:58,733 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:58,733 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:58,734 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:58,735 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:54:59,573 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:54:59,574 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:54:59,576 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:54:59,577 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:54:59,577 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:54:59,579 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:54:59,579 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:00,249 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:55:00,250 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:55:00,251 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:55:00,251 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:55:00,252 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:00,253 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:00,254 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:01,069 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:55:01,070 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:01,072 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:01,073 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:55:01,073 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:01,075 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:01,076 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:01,706 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:55:01,707 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:55:01,709 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:55:01,709 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:55:01,710 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:01,711 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:01,712 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:02,452 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:55:02,453 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:02,454 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:02,454 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:55:02,455 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:02,456 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:02,456 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:03,034 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:55:03,035 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:55:03,036 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:55:03,036 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:55:03,036 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:03,038 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:03,038 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:03,924 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:55:03,924 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:03,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:03,926 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:55:03,926 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:03,927 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:03,927 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:04,628 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:55:04,628 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:55:04,630 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:55:04,631 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:55:04,631 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:04,632 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:04,633 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 6,
      "serialNumber" : "sx100",
      "name" : "摄像机",
      "brand" : "松下",
      "model" : "100",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c81.jpg",
      "description" : "松下sx100"
    }, {
      "productId" : 7,
      "serialNumber" : "k200",
      "name" : "数码相机",
      "brand" : "柯达",
      "model" : "200",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c116.jpg",
      "description" : "柯达200"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:05,364 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:55:05,365 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:05,366 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:05,367 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:55:05,367 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:05,368 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:05,368 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:55:33,845 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:33,846 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:33,852 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:33,852 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:33,853 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:33,855 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:33,856 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:55:35,828 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:35,829 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:55:35,830 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:35,831 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:35,831 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:35,833 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:35,833 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:55:36,313 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:36,314 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:36,315 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:36,315 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:36,315 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:36,316 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:36,316 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:55:49,644 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:49,645 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:49,647 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:49,648 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:49,648 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:49,651 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:49,653 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:55:50,339 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:50,340 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:50,341 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:50,342 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:50,342 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:50,343 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:50,343 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:55:51,074 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:51,074 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:51,075 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:51,076 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:51,076 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:51,077 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:51,077 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:55:52,110 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:52,111 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:55:52,115 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:52,117 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:52,118 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:52,120 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:52,120 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:55:52,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:52,617 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:55:52,619 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:52,620 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:52,620 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:52,621 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:52,621 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:55:52,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:55:52,922 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 16:55:52,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:55:52,925 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:55:52,926 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:55:52,927 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:55:52,928 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "newsId" : 71,
      "title" : "桂林最好玩的地方",
      "content" : "桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学桂林电子科技大学",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 7,
      "title" : "国庆各品牌最好卖的相机",
      "content" : "七天的国庆长w小编一样有一种意犹...",
      "writeDate" : 1539129600000
    }, {
      "newsId" : 72,
      "title" : "ahhaha",
      "content" : "adasdsad",
      "writeDate" : 1563926400000
    }, {
      "newsId" : 66,
      "title" : "今天下大雨",
      "content" : "今天下大雨 大雨",
      "writeDate" : 1563667200000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:56:14,951 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:56:14,952 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:56:14,954 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:56:14,955 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:56:14,955 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:56:14,957 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:56:14,958 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:56:16,074 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 16:56:16,075 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:56:16,079 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:56:16,081 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 16:56:16,082 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:56:16,086 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:56:16,089 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 16:56:17,340 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 16:56:17,341 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:56:17,343 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:56:17,344 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 16:56:30,600 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:56:30,601 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:56:30,603 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:56:30,603 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:56:30,603 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:56:30,604 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:56:30,606 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:56:30,606 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:56:30,607 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:56:30,608 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:56:30,609 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:56:30,609 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:56:30,613 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:57:01,664 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:57:01,665 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:01,666 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:57:01,666 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:01,667 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:01,667 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:57:01,670 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:57:01,671 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:57:01,670 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:01,671 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:57:01,672 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:57:01,672 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:57:01,675 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:57:46,342 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:57:46,342 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:57:46,342 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:46,343 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:46,346 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:46,346 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:46,346 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:57:46,347 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:57:46,347 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:57:46,346 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:57:46,347 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:57:46,352 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:57:46,352 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:57:46,972 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:57:46,973 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:46,976 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:46,977 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:57:46,978 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:46,978 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:57:46,978 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:57:46,978 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:57:46,978 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:46,979 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:57:46,981 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:57:46,981 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:57:46,982 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:57:47,329 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:57:47,331 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:47,333 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:57:47,334 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:47,335 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:47,336 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:57:47,336 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:57:47,336 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:57:47,336 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:47,337 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:57:47,337 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:57:47,339 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:57:47,339 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:57:52,291 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:57:52,291 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:52,294 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:57:52,295 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:52,295 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:52,295 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:52,297 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:57:52,297 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:57:52,297 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:57:52,298 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:57:52,300 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:57:52,302 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:57:52,302 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:57:52,979 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:57:52,980 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:52,982 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:57:52,983 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:52,984 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:52,985 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:57:52,985 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:57:52,985 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:57:52,985 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:52,986 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:57:52,986 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:57:52,988 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:57:52,989 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:57:53,273 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:57:53,274 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:53,278 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:57:53,278 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:57:53,278 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:53,278 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:57:53,278 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:57:53,279 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:57:53,280 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:57:53,281 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:57:53,282 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:57:53,282 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:57:53,283 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:06,704 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:06,705 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:06,707 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:06,708 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:06,714 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:06,714 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:06,716 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:06,716 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:06,714 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:06,719 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:06,722 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:06,723 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:06,724 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:07,372 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:07,372 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:07,372 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:07,372 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:07,378 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:07,380 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:07,380 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:07,380 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:07,380 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:07,381 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:07,381 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:07,385 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:07,385 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:07,902 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:07,902 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:07,902 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:07,903 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:07,906 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:07,906 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:07,907 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:07,908 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:07,908 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:07,909 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:07,908 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:07,909 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:07,911 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:08,418 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:08,418 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:08,419 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:08,419 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:08,422 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:08,422 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:08,422 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:08,422 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:08,422 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:08,423 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:08,423 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:08,425 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:08,425 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:08,810 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:08,811 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:08,812 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:08,812 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:08,814 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:08,815 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:08,815 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:08,815 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:08,816 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:08,817 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:08,818 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:08,818 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:08,821 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:09,138 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:09,138 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:09,139 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:09,138 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:09,139 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:09,139 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:09,139 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:09,140 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:09,144 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:09,144 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:09,144 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:09,144 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:09,144 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:09,468 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:09,468 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:09,468 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:09,468 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:09,470 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:09,470 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:09,471 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:09,470 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:09,472 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:09,472 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:09,473 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:09,473 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:09,473 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:09,853 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:09,854 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:09,854 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:09,854 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:09,856 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:09,856 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:09,857 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:09,857 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:09,857 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:09,858 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:09,858 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:09,860 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:09,860 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:10,182 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:10,182 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:10,183 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:10,184 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:10,185 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:10,184 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:10,185 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:10,186 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:10,186 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:10,187 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:10,187 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:10,187 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:10,189 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:10,655 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:10,655 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:10,656 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:10,656 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:10,663 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:10,657 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:10,663 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:10,662 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:10,667 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:10,667 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:10,668 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:10,671 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:10,670 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:11,082 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:11,082 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:11,083 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:11,083 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:11,086 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:11,087 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:11,087 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:11,088 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:11,086 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:11,091 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:11,095 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:11,096 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:11,099 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:11,516 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:11,517 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:11,518 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:11,519 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:11,516 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:11,521 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:11,524 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:11,528 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:11,529 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:11,530 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:11,533 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:11,533 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:11,534 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:11,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:11,922 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:11,923 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:11,923 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:11,923 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:11,923 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:11,927 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:11,928 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:11,928 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:11,928 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:11,928 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:11,929 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:11,932 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:12,350 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:12,351 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:12,354 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:12,355 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:12,355 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:12,354 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:12,355 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:12,356 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:12,356 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:12,356 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:12,365 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:12,365 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:12,365 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:29,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:29,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:29,234 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:29,235 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:29,239 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:29,239 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:29,239 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:29,239 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:29,239 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:29,239 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:29,240 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:29,242 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:29,242 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:29,821 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:29,821 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:29,823 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:29,823 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:29,825 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:29,825 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:29,825 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:29,825 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:29,826 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:29,827 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:29,827 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:29,828 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:29,833 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:30,386 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:30,387 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:30,389 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:30,390 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:30,390 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:30,390 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:30,394 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:30,395 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:30,395 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:30,394 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:30,396 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:30,399 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:30,399 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:30,940 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:30,941 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:30,942 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:30,942 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:30,942 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:30,942 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:30,949 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:30,949 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:30,950 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:30,950 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:30,950 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:30,950 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:30,953 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:46,215 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:46,215 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:46,215 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:46,215 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:46,222 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:46,225 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:46,225 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:46,225 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:46,225 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:46,225 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:46,225 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:46,229 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:46,230 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:46,817 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:46,819 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:46,824 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:46,824 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:46,824 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:46,825 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:46,825 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:46,825 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:46,825 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:46,825 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:46,830 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:46,830 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:46,830 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:47,202 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:47,203 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:47,203 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:47,203 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:47,206 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:47,206 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:47,206 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:47,206 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:47,206 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:47,207 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:47,207 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:47,209 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:47,209 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:47,590 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:47,591 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:47,592 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:47,592 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:47,593 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:47,594 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:47,595 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:47,602 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:47,602 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:47,600 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:47,603 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:47,605 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:58:47,605 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:47,996 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:58:47,998 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:48,000 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:58:48,001 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:58:48,003 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:48,004 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:58:48,004 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:58:48,004 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:58:48,004 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:58:48,004 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:58:48,004 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 16:58:48,007 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:58:48,007 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:59:03,383 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 16:59:03,383 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 16:59:03,386 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:59:03,386 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 16:59:03,387 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:59:03,389 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 16:59:03,389 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 16:59:08,328 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:59:08,328 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 16:59:08,328 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 16:59:08,328 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 16:59:08,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 16:59:08,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:59:08,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 16:59:08,328 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 16:59:08,332 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 16:59:08,332 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 16:59:08,332 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 16:59:08,333 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 16:59:08,333 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:14,689 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:14,690 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:14,690 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:14,691 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:14,691 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:14,692 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:14,694 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:14,693 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:14,694 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:14,694 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:14,695 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:14,695 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:14,696 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:15,270 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:15,271 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:15,274 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:15,274 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:15,275 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:15,275 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:15,278 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:15,278 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:15,278 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:15,278 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:15,278 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:15,281 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:15,281 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:15,981 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:15,981 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:15,981 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:15,982 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:15,982 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:15,982 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:15,990 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:15,990 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:15,990 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:15,990 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:15,990 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:15,990 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:15,992 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:16,429 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:16,430 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:16,431 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:16,432 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:16,433 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:16,433 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:16,434 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:16,435 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:16,437 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:16,438 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:16,438 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:16,438 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:16,438 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:16,754 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:16,754 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:16,754 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:16,754 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:16,757 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:16,757 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:16,757 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:16,757 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:16,757 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:16,759 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:16,763 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:16,764 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:16,767 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:17,131 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:17,131 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:17,132 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:17,133 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:17,131 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:17,134 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:17,134 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:17,135 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:17,138 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:17,138 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:17,140 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:17,140 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:17,141 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:17,506 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:17,507 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:17,509 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:17,510 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:17,510 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:17,510 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:17,512 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:17,513 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:17,514 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:17,513 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:17,515 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:17,518 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:17,518 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:26,253 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 17:01:26,253 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 17:01:26,255 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:01:26,256 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  }
}
2019-07-25 17:01:27,866 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 17:01:27,866 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:01:27,868 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:27,869 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 17:01:27,869 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:27,871 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:01:27,873 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 17:01:31,385 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:31,385 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:31,386 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:31,386 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:31,387 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:31,387 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:31,388 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:31,389 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:31,390 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:31,391 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:31,391 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:31,391 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:31,392 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:01:33,092 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 17:01:33,092 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 70(Integer)
2019-07-25 17:01:33,095 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:01:33,095 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 70,
    "title" : "新闻",
    "content" : "新闻新闻n",
    "writeDate" : 1563840000000
  }
}
2019-07-25 17:01:34,091 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:01:34,091 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:34,093 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:34,093 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:01:34,093 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:01:34,093 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:01:34,094 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:01:34,093 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:01:34,097 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:01:34,097 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:01:34,097 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:01:34,098 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:01:34,098 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:38,713 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:02:38,714 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:38,719 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:02:38,719 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:02:38,720 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:38,720 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:38,721 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:38,721 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:02:38,724 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:38,725 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:02:38,725 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:02:38,726 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:02:38,728 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:02:39,588 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:02:39,589 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:39,590 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:02:39,591 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:02:39,591 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:39,591 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:39,597 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:39,597 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:39,597 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:02:39,598 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:02:39,598 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:02:39,600 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:02:39,600 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:02:40,043 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:02:40,044 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:40,044 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:02:40,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:40,048 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:02:40,049 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:40,049 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:40,049 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:02:40,051 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:02:40,052 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:40,051 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:02:40,054 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:02:40,058 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:02:40,476 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:40,476 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:02:40,476 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:02:40,476 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:40,477 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:02:40,478 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:40,480 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:02:40,480 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:02:40,481 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:02:40,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:40,482 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:40,483 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:02:40,486 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:02:40,861 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:02:40,862 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:40,864 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:02:40,864 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:02:40,864 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:40,864 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:40,867 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:02:40,867 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:40,867 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:02:40,870 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:40,870 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:02:40,871 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:02:40,873 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:02:41,222 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:02:41,223 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:41,224 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:02:41,225 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:41,227 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:02:41,229 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:41,230 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:02:41,230 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:41,231 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:02:41,232 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:41,232 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:02:41,236 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:02:41,236 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:02:41,612 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:02:41,613 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:41,614 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:02:41,614 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:41,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:02:41,617 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:41,617 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:02:41,618 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:41,618 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:02:41,621 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:02:41,625 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:41,626 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:02:41,629 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:02:42,678 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:02:42,679 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:42,682 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:02:42,682 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:02:42,684 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:42,684 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:02:42,684 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:02:42,685 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:02:42,684 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:02:42,685 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:02:42,685 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:02:42,687 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:02:42,687 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:27,487 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:03:27,488 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:27,489 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:27,489 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:03:27,489 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:27,489 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:03:27,489 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:27,489 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:03:27,494 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:03:27,494 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:03:27,495 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:03:27,495 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:03:27,495 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:28,072 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:03:28,073 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:28,075 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:03:28,076 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:03:28,076 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:28,076 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:03:28,076 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:28,077 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:03:28,077 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:28,077 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:03:28,078 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:03:28,079 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:28,079 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:03:28,615 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:03:28,617 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:28,622 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:03:28,623 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:03:28,623 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:28,623 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:03:28,623 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:28,623 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:28,623 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:03:28,623 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:03:28,626 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:03:28,626 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:03:28,626 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:42,187 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 17:03:42,189 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:03:42,192 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:42,193 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 17:03:42,194 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:42,196 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:03:42,197 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 17:03:43,407 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:03:43,408 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:43,412 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:43,412 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:43,412 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:03:43,412 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:03:43,412 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:03:43,412 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:03:43,413 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:03:43,413 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:43,415 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:03:43,416 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:43,416 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:03:47,972 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 17:03:47,973 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:03:47,978 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:47,979 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 17:03:47,979 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:47,984 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:03:47,984 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:03:49,134 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 17:03:49,135 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:03:49,137 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:49,138 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 17:03:49,138 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:49,140 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:03:49,140 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 17:03:51,389 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:03:51,389 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:03:51,390 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:51,390 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:03:51,390 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:51,391 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:03:51,394 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:03:51,394 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:03:51,394 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:03:51,395 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:03:51,394 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:03:51,395 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:03:51,398 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:06:45,919 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:06:45,920 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:45,921 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:06:45,921 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:45,924 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:06:45,925 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:06:45,925 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:06:45,927 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:45,926 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:45,927 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:06:45,927 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:06:45,931 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:06:45,931 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:06:46,339 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:06:46,340 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:46,341 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:06:46,342 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:46,342 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:06:46,343 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:06:46,349 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:46,349 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:06:46,349 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:46,349 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:06:46,349 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:06:46,352 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:06:46,352 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:06:46,752 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:06:46,753 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:46,755 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:06:46,755 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:06:46,756 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:46,756 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:06:46,756 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:46,757 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:06:46,757 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:46,758 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:06:46,758 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:06:46,764 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:06:46,765 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:06:47,100 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:06:47,101 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:47,101 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:47,101 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:06:47,102 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:06:47,102 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:47,102 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:47,103 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:06:47,106 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:06:47,106 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:06:47,106 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:06:47,106 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:06:47,106 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:06:48,024 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 17:06:48,025 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:06:48,028 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:06:48,030 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 17:06:48,031 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:48,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:06:48,034 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:06:49,442 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:06:49,443 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:49,444 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:06:49,444 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:49,445 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:49,445 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:06:49,447 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:49,447 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:06:49,447 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:06:49,448 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:06:49,448 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:06:49,448 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:06:49,450 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:06:50,451 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 17:06:50,452 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:06:50,453 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:06:50,454 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 17:06:50,454 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:50,455 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:06:50,455 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:06:52,141 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:06:52,141 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:52,141 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:52,141 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:06:52,141 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:06:52,142 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:06:52,142 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:06:52,142 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:06:52,146 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:06:52,146 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:06:52,146 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:06:52,148 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:06:52,148 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:07:19,283 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message 
2019-07-25 17:07:19,283 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:07:19,285 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:07:19,286 DEBUG (MessageController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }, {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }, {
    "messageId" : 3,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "xss",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 5,
    "title" : "haha",
    "content" : "haha",
    "writer" : "hahah",
    "writeDate" : 1546992000000,
    "count" : 11
  }, {
    "messageId" : 7,
    "title" : "航空母舰",
    "content" : "出行利器",
    "writer" : "哈哈",
    "writeDate" : 1563206400000,
    "count" : 100
  }, {
    "messageId" : 15,
    "title" : "测试",
    "content" : "测试内容",
    "writer" : "作者",
    "writeDate" : 1563148800000,
    "count" : 100
  }, {
    "messageId" : 21,
    "title" : "今天天气",
    "content" : "aaaaaaaaaaaa",
    "writer" : "aa",
    "writeDate" : 1563897600000,
    "count" : 0
  } ]
}
2019-07-25 17:07:49,662 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 17:07:49,663 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:07:49,665 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:07:49,665 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 17:07:49,666 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:07:49,666 DEBUG (MessageController.java:49)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 17:07:49,669 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:07:49,671 DEBUG (RevertController.java:23)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 17:07:51,641 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:07:51,642 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:07:51,644 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:07:51,644 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:07:51,645 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:07:51,645 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:07:51,646 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:07:51,646 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:07:51,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:07:51,646 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:07:51,647 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:07:51,648 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:07:51,648 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:14:48,345 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-7TTQDPL with PID 7320 (G:\scsx\project\company\target\classes started by luojun in G:\scsx\project\company)
2019-07-25 17:14:48,346 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 17:14:48,346 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 17:14:49,567 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 1.289 seconds (JVM running for 7223.275)
2019-07-25 17:15:02,377 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:15:02,383 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:15:02,386 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:15:02,388 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:15:02,396 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:15:02,400 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:15:02,401 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:15:02,403 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:15:02,409 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:15:02,414 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:15:02,414 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:15:02,417 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:15:02,419 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:15:05,865 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:15:05,865 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:15:05,869 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:15:05,869 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 17:15:05,870 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:15:05,871 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:15:05,871 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:15:05,872 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:15:05,873 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:15:16,492 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 17:15:16,493 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:15:16,495 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:15:16,495 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 17:15:16,495 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:15:16,499 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:15:16,500 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 17:15:20,514 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 17:15:20,515 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:15:20,519 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:15:20,519 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 17:15:20,520 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:15:20,522 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:15:20,524 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c1.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 2,
      "serialNumber" : "s05",
      "name" : "摄像机",
      "brand" : "三星",
      "model" : "05",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c8.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 4,
      "serialNumber" : "v60",
      "name" : "手机",
      "brand" : "摩托罗拉",
      "model" : "60",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c22.jpg",
      "description" : "摩托罗拉 v60"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:16:53,479 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:16:53,479 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:16:53,481 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:16:53,482 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:16:53,483 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:16:53,491 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:16:53,493 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:16:54,832 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 17:16:54,833 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 17:16:54,833 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 2(Integer)
2019-07-25 17:16:54,833 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 2(Integer)
2019-07-25 17:16:54,835 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:16:54,835 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:16:54,836 DEBUG (MessageController.java:55)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 2,
    "title" : "(NULL品红服务宗旨是什么)",
    "content" : "品红服务宗旨是：为用户服务",
    "writer" : "bobo",
    "writeDate" : 1562889600000,
    "count" : 0
  }
}
2019-07-25 17:16:54,837 DEBUG (RevertController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 66,
    "messageId" : 2,
    "content" : "为人民服务",
    "writer" : "luojun",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 70,
    "messageId" : 2,
    "content" : "是啊",
    "writer" : "111",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 71,
    "messageId" : 2,
    "content" : "是啊",
    "writer" : "111",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 17:16:58,236 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:16:58,237 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:16:58,238 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:16:58,239 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:16:58,239 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:16:58,241 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:16:58,241 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:17:00,720 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 17:17:00,721 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:17:00,723 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:17:00,724 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 17:17:00,725 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:17:00,729 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:17:00,730 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 67,
      "title" : "一条新闻",
      "content" : "新闻新闻新闻",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 68,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 69,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    }, {
      "newsId" : 70,
      "title" : "新闻",
      "content" : "新闻新闻n",
      "writeDate" : 1563840000000
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 17:17:02,781 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:17:02,782 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:17:02,783 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:17:02,784 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:17:02,784 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:17:02,786 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:17:02,786 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:17:03,727 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:17:03,727 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 17:17:03,730 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:17:03,730 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:17:03,730 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:17:03,732 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:17:03,733 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "messageId" : 7,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "哈哈",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 15,
      "title" : "测试",
      "content" : "测试内容",
      "writer" : "作者",
      "writeDate" : 1563148800000,
      "count" : 100
    }, {
      "messageId" : 21,
      "title" : "今天天气",
      "content" : "aaaaaaaaaaaa",
      "writer" : "aa",
      "writeDate" : 1563897600000,
      "count" : 0
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:17:04,316 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:17:04,316 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:17:04,318 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:17:04,318 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:17:04,318 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:17:04,319 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:17:04,320 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:18:15,837 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:18:15,839 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:18:15,842 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:18:15,843 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:18:15,844 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:18:15,847 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:18:15,848 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:18:17,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 17:18:17,234 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 17:18:17,234 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:18:17,234 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:18:17,236 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:18:17,236 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:18:17,236 DEBUG (RevertController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 69,
    "messageId" : 1,
    "content" : "我觉得可以",
    "writer" : "zzz",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 17:18:17,236 DEBUG (MessageController.java:55)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 17:18:20,014 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: DELETE FROM revert WHERE revertId = ? 
2019-07-25 17:18:20,014 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 69(Integer)
2019-07-25 17:18:20,027 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 17:18:20,032 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 17:18:20,033 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:18:20,033 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 17:18:20,033 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:18:20,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:18:20,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 17:18:20,034 DEBUG (MessageController.java:55)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 17:18:20,034 DEBUG (RevertController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  } ]
}
2019-07-25 17:18:24,989 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:18:24,989 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:18:24,991 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:18:24,992 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 17:18:24,992 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:18:24,993 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:18:24,993 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:18:24,993 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:18:24,999 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:20:02,739 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:20:02,740 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:20:02,742 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:20:02,743 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:20:02,744 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:02,746 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:20:02,746 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:20:04,630 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:20:04,630 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 17:20:04,633 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:20:04,633 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:20:04,634 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:04,635 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:20:04,635 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "messageId" : 7,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "哈哈",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 15,
      "title" : "测试",
      "content" : "测试内容",
      "writer" : "作者",
      "writeDate" : 1563148800000,
      "count" : 100
    }, {
      "messageId" : 21,
      "title" : "今天天气",
      "content" : "aaaaaaaaaaaa",
      "writer" : "aa",
      "writeDate" : 1563897600000,
      "count" : 0
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:20:05,300 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:20:05,301 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:20:05,302 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:20:05,303 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:20:05,303 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:05,304 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:20:05,305 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:20:12,731 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:20:12,731 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:12,733 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:20:12,733 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:20:12,734 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:20:12,734 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:20:12,734 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:20:12,735 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:12,736 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:20:12,736 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:20:12,739 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:20:12,740 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:20:12,743 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:20:14,490 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:20:14,491 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:20:14,494 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:20:14,495 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:20:14,495 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:14,497 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:20:14,498 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:20:45,342 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:20:45,343 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:45,344 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:20:45,345 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:20:45,345 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:45,346 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:20:45,347 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:20:45,347 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:20:45,347 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:20:45,347 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:20:45,350 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:20:45,350 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:20:45,350 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:20:47,055 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:20:47,055 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:20:47,057 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:20:47,058 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:20:47,058 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:20:47,060 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:20:47,061 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:21:14,014 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:21:14,015 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:21:14,017 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:21:14,018 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:21:14,018 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:14,020 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:14,021 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:21:14,648 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:21:14,649 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:21:14,650 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:21:14,651 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:21:14,652 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:14,654 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:14,656 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:21:15,074 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:21:15,075 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:21:15,077 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:21:15,077 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:21:15,078 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:15,079 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:15,080 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:21:15,659 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:21:15,660 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:21:15,662 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:21:15,662 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:21:15,663 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:15,664 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:15,665 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:21:18,544 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 17:21:18,545 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:21:18,546 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 17:21:18,547 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:18,547 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:21:18,547 DEBUG (MessageController.java:55)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 17:21:18,549 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 2
2019-07-25 17:21:18,549 DEBUG (RevertController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  } ]
}
2019-07-25 17:21:25,190 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO revert VALUES(NULL,?,?,?,?) 
2019-07-25 17:21:25,191 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer), q'q(String), qq(String), 2019-07-25 00:00:00.0(Timestamp)
2019-07-25 17:21:25,202 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 17:21:25,207 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from message where messageId= ? 
2019-07-25 17:21:25,207 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM revert WHERE messageId = ? 
2019-07-25 17:21:25,208 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:21:25,208 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 1(Integer)
2019-07-25 17:21:25,209 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:21:25,209 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:25,210 DEBUG (MessageController.java:55)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "messageId" : 1,
    "title" : "价格最低的MP4",
    "content" : "价格最低的MP4是什么牌子？价格是多少？",
    "writer" : "zzg",
    "writeDate" : 1563321600000,
    "count" : 1
  }
}
2019-07-25 17:21:25,210 DEBUG (RevertController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "revertId" : 67,
    "messageId" : 1,
    "content" : "最便宜的MP4是Mp3.",
    "writer" : "zzi",
    "writerDate" : 1563840000000
  }, {
    "revertId" : 68,
    "messageId" : 1,
    "content" : "我觉得不是",
    "writer" : "zzj",
    "writerDate" : 1562630400000
  }, {
    "revertId" : 78,
    "messageId" : 1,
    "content" : "q'q",
    "writer" : "qq",
    "writerDate" : 1563926400000
  } ]
}
2019-07-25 17:21:28,014 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:21:28,015 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:21:28,016 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:21:28,016 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:21:28,017 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:28,018 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:28,019 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 17:21:34,262 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: INSERT INTO message VALUE(NULL,?,?,? ,?,?) 
2019-07-25 17:21:34,263 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: qqq(String), qqq(String), qqq(String), 2019-07-25 00:00:00.0(Timestamp), 0(Integer)
2019-07-25 17:21:34,273 DEBUG (BaseJdbcLogger.java:143)- <==    Updates: 1
2019-07-25 17:21:35,416 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:21:35,417 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:21:35,420 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:21:35,421 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:21:35,422 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:35,424 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:35,425 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 17:21:39,662 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:21:39,662 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer), 4(Integer)
2019-07-25 17:21:39,663 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:21:39,663 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:21:39,663 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:39,664 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:39,664 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 2,
    "pageData" : [ {
      "messageId" : 7,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "哈哈",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 15,
      "title" : "测试",
      "content" : "测试内容",
      "writer" : "作者",
      "writeDate" : 1563148800000,
      "count" : 100
    }, {
      "messageId" : 21,
      "title" : "今天天气",
      "content" : "aaaaaaaaaaaa",
      "writer" : "aa",
      "writeDate" : 1563897600000,
      "count" : 0
    }, {
      "messageId" : 23,
      "title" : "qqq",
      "content" : "qqq",
      "writer" : "qqq",
      "writeDate" : 1563984000000,
      "count" : 0
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 17:21:42,586 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:21:42,586 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:21:42,588 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:21:42,588 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:42,588 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:21:42,588 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:21:42,591 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:21:42,591 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:21:42,591 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:21:42,591 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:21:42,591 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:21:42,592 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:21:42,594 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:21:44,533 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:21:44,533 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:21:44,534 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:44,534 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 17:21:44,534 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:21:44,535 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:21:44,536 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:21:44,536 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:21:44,537 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:24:52,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:24:52,011 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:24:52,010 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:24:52,012 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:24:52,013 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:24:52,013 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:24:52,014 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:24:52,014 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:24:52,015 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:24:52,017 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:24:52,018 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:24:52,018 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:24:52,018 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:24:54,788 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:24:54,788 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:24:54,789 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:24:54,789 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 17:24:54,790 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:24:54,791 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:24:54,791 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:24:54,791 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:24:54,792 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:26:00,030 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:26:00,030 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:00,031 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:26:00,032 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:00,032 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:26:00,032 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:26:00,033 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:26:00,033 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:26:00,034 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:26:00,034 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:26:00,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:26:00,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:26:00,036 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:26:04,474 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news where newsId = ? order by newsId 
2019-07-25 17:26:04,474 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 7(Integer)
2019-07-25 17:26:04,476 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:26:04,476 DEBUG (NewsController.java:71)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "newsId" : 7,
    "title" : "国庆各品牌最好卖的相机",
    "content" : "七天的国庆长w小编一样有一种意犹...",
    "writeDate" : 1539129600000
  }
}
2019-07-25 17:26:06,043 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:26:06,043 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:26:06,043 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:06,043 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:06,046 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:26:06,046 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:26:06,046 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:26:06,046 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:26:06,046 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:26:06,046 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:26:06,047 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:26:06,050 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:26:06,050 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:26:07,168 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:26:07,169 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:26:07,175 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:26:07,176 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:26:07,177 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:07,178 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:26:07,181 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 17:26:08,627 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:26:08,627 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:26:08,627 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:26:08,627 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:26:08,627 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:08,627 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:26:08,627 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:26:08,627 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:08,633 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:26:08,632 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:26:08,633 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:26:08,633 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:26:08,633 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:26:11,446 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from users where userName=? 
2019-07-25 17:26:11,446 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 用户名(String)
2019-07-25 17:26:11,448 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 0
2019-07-25 17:26:13,134 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 17:26:13,134 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 17:26:13,134 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:13,134 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:13,135 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:26:13,136 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 17:26:13,137 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 17:26:13,137 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 17:26:13,138 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:26:13,137 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 17:26:13,138 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 17:26:13,138 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c1.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 2,
    "serialNumber" : "s05",
    "name" : "摄像机",
    "brand" : "三星",
    "model" : "05",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c8.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 4,
    "serialNumber" : "v60",
    "name" : "手机",
    "brand" : "摩托罗拉",
    "model" : "60",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c22.jpg",
    "description" : "摩托罗拉 v60"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  } ]
}
2019-07-25 17:26:13,139 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 17:26:16,417 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:26:16,417 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:26:16,419 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:26:16,420 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select status from users where userName = ? 
2019-07-25 17:26:16,420 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:26:16,422 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:26:16,423 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select password from users where userName = ? 
2019-07-25 17:26:16,423 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: luo(String)
2019-07-25 17:26:16,426 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:26:18,510 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 17:26:18,510 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 17:26:18,513 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 17:26:18,515 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 17:26:18,515 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 17:26:18,517 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 17:26:18,517 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 3,
      "title" : "航空母舰",
      "content" : "出行利器",
      "writer" : "xss",
      "writeDate" : 1563206400000,
      "count" : 100
    }, {
      "messageId" : 5,
      "title" : "haha",
      "content" : "haha",
      "writer" : "hahah",
      "writeDate" : 1546992000000,
      "count" : 11
    } ],
    "pageCount" : 2,
    "dataCount" : 8
  }
}
2019-07-25 19:55:11,265 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-8L1UIJU with PID 13696 (H:\company\target\classes started by 用户 in H:\company)
2019-07-25 19:55:11,265 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 19:55:11,265 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 19:55:13,396 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 2.691 seconds (JVM running for 3.888)
2019-07-25 19:55:58,156 ERROR (BaseController.java:295)- 系统异常:nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
### The error may exist in com/zryx/company/mapper/NewsMapper.xml
### The error may involve com.zryx.company.mapper.NewsMapper.getNewsByPage
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
### The error may exist in com/zryx/company/mapper/NewsMapper.xml
### The error may involve com.zryx.company.mapper.NewsMapper.getNewsByPage
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy62.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)
	at com.sun.proxy.$Proxy67.getNewsByPage(Unknown Source)
	at com.zryx.company.service.imp.NewsServiceImpl.getNewsByPage(NewsServiceImpl.java:85)
	at com.zryx.company.controller.NewsController.initNews(NewsController.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
### The error may exist in com/zryx/company/mapper/NewsMapper.xml
### The error may involve com.zryx.company.mapper.NewsMapper.getNewsByPage
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	... 62 common frames omitted
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:336)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	... 68 common frames omitted
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:835)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:455)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:240)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:199)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	... 78 common frames omitted
2019-07-25 19:56:22,227 INFO (StartupInfoLogger.java:50)- Starting CompanyApplication on DESKTOP-8L1UIJU with PID 4224 (H:\company\target\classes started by 用户 in H:\company)
2019-07-25 19:56:22,227 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.6.RELEASE, Spring v5.1.8.RELEASE
2019-07-25 19:56:22,227 INFO (SpringApplication.java:646)- No active profile set, falling back to default profiles: default
2019-07-25 19:56:24,070 INFO (StartupInfoLogger.java:59)- Started CompanyApplication in 2.193 seconds (JVM running for 3.076)
2019-07-25 19:56:34,603 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 19:56:34,633 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:56:34,653 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:56:34,653 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 19:56:34,653 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:56:34,653 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:56:34,693 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "庆十一商品促销",
      "content" : "\t为了庆祝十一国庆节，现公司所有电子商品进行促销活动，活动期间所有商品打五折。",
      "writeDate" : 1562457600000
    }, {
      "newsId" : 2,
      "title" : "爱国者数码相机今日七折优惠",
      "content" : "为了答谢广大用户，爱国者数码相机今日七折优惠。",
      "writeDate" : 1557014400000
    }, {
      "newsId" : 3,
      "title" : "黄金周最热销手机汇总导购",
      "content" : "在这个被看作是我国最大的消费高峰之一的七天长假中，那些准备买新手机的朋友们是不是已经买到了称心如意的手机呢？今天手机中国编辑就把从北京几大手机卖场了解到的这七天长假中几款最热卖的机型做个总结，相信这些机型也是大多数朋友认可和喜爱的，看看你的选择是不是和很多朋友一样，也为还没选好目标的朋友做个推荐",
      "writeDate" : 1565222400000
    }, {
      "newsId" : 4,
      "title" : "时尚浪漫情侣手机配对推荐",
      "content" : "对于商家来说，十一以后的几天依然是畅销的好时候，各种优惠活动仍然在各大卖场如火如荼的进行。既然是优惠购物好时机，小编今天就为情侣们推荐了三对最登对情侣手机，甜蜜的你们一定能选购到适合他她的最登对手机。",
      "writeDate" : 1557100800000
    } ],
    "pageCount" : 4,
    "dataCount" : 13
  }
}
2019-07-25 19:56:41,545 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 19:56:41,548 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:56:41,549 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:56:41,549 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 19:56:41,549 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:56:41,550 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:56:41,551 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "庆十一商品促销",
      "content" : "\t为了庆祝十一国庆节，现公司所有电子商品进行促销活动，活动期间所有商品打五折。",
      "writeDate" : 1562457600000
    }, {
      "newsId" : 2,
      "title" : "爱国者数码相机今日七折优惠",
      "content" : "为了答谢广大用户，爱国者数码相机今日七折优惠。",
      "writeDate" : 1557014400000
    }, {
      "newsId" : 3,
      "title" : "黄金周最热销手机汇总导购",
      "content" : "在这个被看作是我国最大的消费高峰之一的七天长假中，那些准备买新手机的朋友们是不是已经买到了称心如意的手机呢？今天手机中国编辑就把从北京几大手机卖场了解到的这七天长假中几款最热卖的机型做个总结，相信这些机型也是大多数朋友认可和喜爱的，看看你的选择是不是和很多朋友一样，也为还没选好目标的朋友做个推荐",
      "writeDate" : 1565222400000
    }, {
      "newsId" : 4,
      "title" : "时尚浪漫情侣手机配对推荐",
      "content" : "对于商家来说，十一以后的几天依然是畅销的好时候，各种优惠活动仍然在各大卖场如火如荼的进行。既然是优惠购物好时机，小编今天就为情侣们推荐了三对最登对情侣手机，甜蜜的你们一定能选购到适合他她的最登对手机。",
      "writeDate" : 1557100800000
    } ],
    "pageCount" : 4,
    "dataCount" : 13
  }
}
2019-07-25 19:56:45,802 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 19:56:45,803 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:56:45,806 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:56:45,808 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 19:56:45,809 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:56:45,810 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:56:45,813 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 7,
      "title" : "六六六",
      "content" : "哈哈哈哈         ",
      "writer" : "张三",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 8,
      "title" : "呵呵哒",
      "content" : "你行你上啊\r\n                ",
      "writer" : "王二",
      "writeDate" : 1563379200000,
      "count" : 5
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 19:56:50,899 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 19:56:50,900 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:56:50,903 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:56:50,904 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 19:56:50,904 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:56:50,905 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:56:50,914 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 19:56:55,301 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 19:56:55,302 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:56:55,306 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:56:55,306 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 19:56:55,307 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:56:55,308 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:56:55,309 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 19:56:58,039 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 19:56:58,040 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:56:58,044 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:56:58,045 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 19:56:58,045 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:56:58,046 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:56:58,046 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 7,
      "title" : "六六六",
      "content" : "哈哈哈哈         ",
      "writer" : "张三",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 8,
      "title" : "呵呵哒",
      "content" : "你行你上啊\r\n                ",
      "writer" : "王二",
      "writeDate" : 1563379200000,
      "count" : 5
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 19:57:00,049 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 19:57:00,051 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:57:00,052 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:57:00,052 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 19:57:00,053 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:57:00,055 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:57:00,056 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "庆十一商品促销",
      "content" : "\t为了庆祝十一国庆节，现公司所有电子商品进行促销活动，活动期间所有商品打五折。",
      "writeDate" : 1562457600000
    }, {
      "newsId" : 2,
      "title" : "爱国者数码相机今日七折优惠",
      "content" : "为了答谢广大用户，爱国者数码相机今日七折优惠。",
      "writeDate" : 1557014400000
    }, {
      "newsId" : 3,
      "title" : "黄金周最热销手机汇总导购",
      "content" : "在这个被看作是我国最大的消费高峰之一的七天长假中，那些准备买新手机的朋友们是不是已经买到了称心如意的手机呢？今天手机中国编辑就把从北京几大手机卖场了解到的这七天长假中几款最热卖的机型做个总结，相信这些机型也是大多数朋友认可和喜爱的，看看你的选择是不是和很多朋友一样，也为还没选好目标的朋友做个推荐",
      "writeDate" : 1565222400000
    }, {
      "newsId" : 4,
      "title" : "时尚浪漫情侣手机配对推荐",
      "content" : "对于商家来说，十一以后的几天依然是畅销的好时候，各种优惠活动仍然在各大卖场如火如荼的进行。既然是优惠购物好时机，小编今天就为情侣们推荐了三对最登对情侣手机，甜蜜的你们一定能选购到适合他她的最登对手机。",
      "writeDate" : 1557100800000
    } ],
    "pageCount" : 4,
    "dataCount" : 13
  }
}
2019-07-25 19:57:02,933 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 19:57:02,935 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:57:02,939 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:57:02,941 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 19:57:02,941 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:57:02,943 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:57:02,945 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 19:57:06,925 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM users LIMIT ?,? 
2019-07-25 19:57:06,925 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:57:06,927 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:57:06,927 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM users 
2019-07-25 19:57:06,928 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:57:06,928 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:57:06,929 DEBUG (UsersController.java:25)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "userId" : 1,
      "userName" : "admin",
      "password" : "admin",
      "status" : 1
    }, {
      "userId" : 2,
      "userName" : "zzg",
      "password" : "zzg",
      "status" : 0
    }, {
      "userId" : 3,
      "userName" : "bobo",
      "password" : "bobo",
      "status" : 0
    }, {
      "userId" : 5,
      "userName" : "aaa",
      "password" : "bbbb",
      "status" : 1
    } ],
    "pageCount" : 1,
    "dataCount" : 4
  }
}
2019-07-25 19:57:10,723 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 19:57:10,724 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:57:10,729 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:57:10,730 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 19:57:10,730 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:57:10,731 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:57:10,732 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 19:58:26,656 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 19:58:26,657 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 19:58:26,659 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 19:58:26,660 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 19:58:26,662 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 19:58:26,662 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 19:58:26,663 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 20:04:40,799 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product 
2019-07-25 20:04:40,801 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:04:40,801 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from news order by writeDate desc limit 0,8 
2019-07-25 20:04:40,802 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:04:40,804 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 7
2019-07-25 20:04:40,806 DEBUG (ProductController.java:26)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : [ {
    "productId" : 1,
    "serialNumber" : "z01",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "g123axx",
    "price" : 80005,
    "picture" : "hulu4.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 24,
    "serialNumber" : "z01",
    "name" : "鞋子",
    "brand" : "葫芦兄弟",
    "model" : "g123",
    "price" : 80,
    "picture" : "hulu2.jpg",
    "description" : "回力"
  }, {
    "productId" : 3,
    "serialNumber" : "a08",
    "name" : "数码相机",
    "brand" : "爱国者",
    "model" : "08",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c16.jpg",
    "description" : "爱国者a08"
  }, {
    "productId" : 5,
    "serialNumber" : "e80",
    "name" : "笔记本",
    "brand" : "IBM",
    "model" : "80",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c2.jpg",
    "description" : "IBM5x系列"
  }, {
    "productId" : 6,
    "serialNumber" : "sx100",
    "name" : "摄像机",
    "brand" : "松下",
    "model" : "100",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c81.jpg",
    "description" : "松下sx100"
  }, {
    "productId" : 7,
    "serialNumber" : "k200",
    "name" : "数码相机",
    "brand" : "柯达",
    "model" : "200",
    "price" : 8000,
    "picture" : "d_r11_10_r1_c116.jpg",
    "description" : "柯达200"
  }, {
    "productId" : 8,
    "serialNumber" : "sa1980",
    "name" : "索爱手机",
    "brand" : "索爱",
    "model" : "1980",
    "price" : 5000,
    "picture" : "d_r11_10_r1_c221.jpg",
    "description" : "索爱最新产品"
  } ]
}
2019-07-25 20:04:40,807 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 8
2019-07-25 20:04:40,808 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 20:04:40,809 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: select * from product order by productId desc limit ?,4 
2019-07-25 20:04:40,810 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 4(Integer)
2019-07-25 20:04:40,810 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer)
2019-07-25 20:04:40,812 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:04:40,812 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 3
2019-07-25 20:05:00,495 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 20:05:00,496 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:05:00,498 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:05:00,500 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 20:05:00,500 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:05:00,502 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:05:00,503 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "庆十一商品促销",
      "content" : "\t为了庆祝十一国庆节，现公司所有电子商品进行促销活动，活动期间所有商品打五折。",
      "writeDate" : 1562457600000
    }, {
      "newsId" : 2,
      "title" : "爱国者数码相机今日七折优惠",
      "content" : "为了答谢广大用户，爱国者数码相机今日七折优惠。",
      "writeDate" : 1557014400000
    }, {
      "newsId" : 3,
      "title" : "黄金周最热销手机汇总导购",
      "content" : "在这个被看作是我国最大的消费高峰之一的七天长假中，那些准备买新手机的朋友们是不是已经买到了称心如意的手机呢？今天手机中国编辑就把从北京几大手机卖场了解到的这七天长假中几款最热卖的机型做个总结，相信这些机型也是大多数朋友认可和喜爱的，看看你的选择是不是和很多朋友一样，也为还没选好目标的朋友做个推荐",
      "writeDate" : 1565222400000
    }, {
      "newsId" : 4,
      "title" : "时尚浪漫情侣手机配对推荐",
      "content" : "对于商家来说，十一以后的几天依然是畅销的好时候，各种优惠活动仍然在各大卖场如火如荼的进行。既然是优惠购物好时机，小编今天就为情侣们推荐了三对最登对情侣手机，甜蜜的你们一定能选购到适合他她的最登对手机。",
      "writeDate" : 1557100800000
    } ],
    "pageCount" : 4,
    "dataCount" : 13
  }
}
2019-07-25 20:05:11,995 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 20:05:11,996 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:05:11,999 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:05:12,000 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 20:05:12,001 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:05:12,005 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:05:12,008 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "庆十一商品促销",
      "content" : "\t为了庆祝十一国庆节，现公司所有电子商品进行促销活动，活动期间所有商品打五折。",
      "writeDate" : 1562457600000
    }, {
      "newsId" : 2,
      "title" : "爱国者数码相机今日七折优惠",
      "content" : "为了答谢广大用户，爱国者数码相机今日七折优惠。",
      "writeDate" : 1557014400000
    }, {
      "newsId" : 3,
      "title" : "黄金周最热销手机汇总导购",
      "content" : "在这个被看作是我国最大的消费高峰之一的七天长假中，那些准备买新手机的朋友们是不是已经买到了称心如意的手机呢？今天手机中国编辑就把从北京几大手机卖场了解到的这七天长假中几款最热卖的机型做个总结，相信这些机型也是大多数朋友认可和喜爱的，看看你的选择是不是和很多朋友一样，也为还没选好目标的朋友做个推荐",
      "writeDate" : 1565222400000
    }, {
      "newsId" : 4,
      "title" : "时尚浪漫情侣手机配对推荐",
      "content" : "对于商家来说，十一以后的几天依然是畅销的好时候，各种优惠活动仍然在各大卖场如火如荼的进行。既然是优惠购物好时机，小编今天就为情侣们推荐了三对最登对情侣手机，甜蜜的你们一定能选购到适合他她的最登对手机。",
      "writeDate" : 1557100800000
    } ],
    "pageCount" : 4,
    "dataCount" : 13
  }
}
2019-07-25 20:09:21,186 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 20:09:21,187 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:09:21,190 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:09:21,193 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 20:09:21,193 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:09:21,196 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:09:21,197 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 20:10:43,435 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 20:10:43,436 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:10:43,439 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:10:43,440 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 20:10:43,441 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:10:43,444 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:10:43,446 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 7,
      "title" : "六六六",
      "content" : "哈哈哈哈         ",
      "writer" : "张三",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 8,
      "title" : "呵呵哒",
      "content" : "你行你上啊\r\n                ",
      "writer" : "王二",
      "writeDate" : 1563379200000,
      "count" : 5
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 20:12:51,788 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM news LIMIT ?,? 
2019-07-25 20:12:51,790 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:12:51,792 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:12:51,793 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM news 
2019-07-25 20:12:51,793 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:12:51,793 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:12:51,795 DEBUG (NewsController.java:37)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "newsId" : 1,
      "title" : "庆十一商品促销",
      "content" : "\t为了庆祝十一国庆节，现公司所有电子商品进行促销活动，活动期间所有商品打五折。",
      "writeDate" : 1562457600000
    }, {
      "newsId" : 2,
      "title" : "爱国者数码相机今日七折优惠",
      "content" : "为了答谢广大用户，爱国者数码相机今日七折优惠。",
      "writeDate" : 1557014400000
    }, {
      "newsId" : 3,
      "title" : "黄金周最热销手机汇总导购",
      "content" : "在这个被看作是我国最大的消费高峰之一的七天长假中，那些准备买新手机的朋友们是不是已经买到了称心如意的手机呢？今天手机中国编辑就把从北京几大手机卖场了解到的这七天长假中几款最热卖的机型做个总结，相信这些机型也是大多数朋友认可和喜爱的，看看你的选择是不是和很多朋友一样，也为还没选好目标的朋友做个推荐",
      "writeDate" : 1565222400000
    }, {
      "newsId" : 4,
      "title" : "时尚浪漫情侣手机配对推荐",
      "content" : "对于商家来说，十一以后的几天依然是畅销的好时候，各种优惠活动仍然在各大卖场如火如荼的进行。既然是优惠购物好时机，小编今天就为情侣们推荐了三对最登对情侣手机，甜蜜的你们一定能选购到适合他她的最登对手机。",
      "writeDate" : 1557100800000
    } ],
    "pageCount" : 4,
    "dataCount" : 13
  }
}
2019-07-25 20:12:56,029 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 20:12:56,029 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:12:56,030 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:12:56,031 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 20:12:56,033 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:12:56,034 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:12:56,035 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 20:12:58,786 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM message LIMIT ?,? 
2019-07-25 20:12:58,787 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:12:58,790 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:12:58,791 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM message 
2019-07-25 20:12:58,791 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:12:58,792 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:12:58,793 DEBUG (MessageController.java:28)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "messageId" : 1,
      "title" : "价格最低的MP4",
      "content" : "价格最低的MP4是什么牌子？价格是多少？",
      "writer" : "zzg",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 2,
      "title" : "(NULL品红服务宗旨是什么)",
      "content" : "品红服务宗旨是：为用户服务",
      "writer" : "bobo",
      "writeDate" : 1562889600000,
      "count" : 0
    }, {
      "messageId" : 7,
      "title" : "六六六",
      "content" : "哈哈哈哈         ",
      "writer" : "张三",
      "writeDate" : 1563321600000,
      "count" : 1
    }, {
      "messageId" : 8,
      "title" : "呵呵哒",
      "content" : "你行你上啊\r\n                ",
      "writer" : "王二",
      "writeDate" : 1563379200000,
      "count" : 5
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 20:13:34,837 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 20:13:34,838 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:13:34,840 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:13:34,841 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 20:13:34,843 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:13:34,845 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:13:34,846 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
2019-07-25 20:19:39,338 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT * FROM product LIMIT ?,? 
2019-07-25 20:19:39,339 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 0(Integer), 4(Integer)
2019-07-25 20:19:39,341 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 4
2019-07-25 20:19:39,344 DEBUG (BaseJdbcLogger.java:143)- ==>  Preparing: SELECT COUNT(*) FROM product 
2019-07-25 20:19:39,345 DEBUG (BaseJdbcLogger.java:143)- ==> Parameters: 
2019-07-25 20:19:39,346 DEBUG (BaseJdbcLogger.java:143)- <==      Total: 1
2019-07-25 20:19:39,347 DEBUG (ProductController.java:41)- json===>{
  "msg" : "查询成功",
  "code" : 0,
  "data" : {
    "pageSize" : 4,
    "pageNum" : 1,
    "pageData" : [ {
      "productId" : 1,
      "serialNumber" : "z01",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "g123axx",
      "price" : 80005,
      "picture" : "hulu4.jpg",
      "description" : "IBM5x系列"
    }, {
      "productId" : 24,
      "serialNumber" : "z01",
      "name" : "鞋子",
      "brand" : "葫芦兄弟",
      "model" : "g123",
      "price" : 80,
      "picture" : "hulu2.jpg",
      "description" : "回力"
    }, {
      "productId" : 3,
      "serialNumber" : "a08",
      "name" : "数码相机",
      "brand" : "爱国者",
      "model" : "08",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c16.jpg",
      "description" : "爱国者a08"
    }, {
      "productId" : 5,
      "serialNumber" : "e80",
      "name" : "笔记本",
      "brand" : "IBM",
      "model" : "80",
      "price" : 8000,
      "picture" : "d_r11_10_r1_c2.jpg",
      "description" : "IBM5x系列"
    } ],
    "pageCount" : 2,
    "dataCount" : 7
  }
}
